暂存缓冲区操作指令 DWIN_C0/C2/C101/C102/C103/C104/C105/C106/C10700/C10701/C10702/C108/C110
     C0 -写数据到暂存缓冲区(基于M100内核的终端不支持,暂存缓冲区的内容会被0x52清屏指令改变)
     C2 -读取暂存缓冲区中内容
     C101 -使用暂存缓冲区数据置点(C1XX指令的操作都是基于C0指令写入的数据进行的,具体使用方法见C1XX指令集)
     C102 -使用暂存缓冲区数据连线
     C103 -使用暂存缓冲区数据显示折线图,可实现曲线动态缩放,最大放大15倍
     C104 -使用暂存缓冲区数据高速无闪烁显示折线图,可实现示波器效果
     C105 -使用暂存缓冲区数据缩放显示折线图,最大放大255倍
     C106 -使用暂存缓冲区数据缩放显示窗口限制双向折线图
     C10700 -清空置点缓冲区
     C10701 -在置点缓冲区置点
     C10702 -恢复置点缓冲区到当前页面
     C108 -使用暂存缓冲区来显示多参数
     C110 -使用暂存缓冲区来缓冲指令实现同步显示(用于同时刷新界面中各实时参数值)    
      
 EX: 发送 DWIN_C0 (0,DAT,3);有u16 DAT[3]={0xA1B2,0xC3D4,0xE5F6};
     (即AA C0 00 00 A1 B2 C3 D4 E5 F6 CC 33 C3 3C)
 	   接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     A1B2、C3D4、E5F6 -要写入的数据,以字(Word)为最小单位
     *P 为存有需要存入暂存缓冲区的数组如u16 DAT[3]={0xA1B2,0xC3D4,0xE5F6}
     Size 为从该数组中依次取出发送的字的个数,最小值为1
     
 EX: 发送 DWIN_C2 (0,3);(即AA C2 00 00 00 03 CC 33 C3 3C)
 	   接收 AA C2 <Data_Pack> CC 33 C3 3C
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     00 03 -读取的数据字(Word)长度,返回3个字(6字节)数据
     <Data_Pack> -读取的数据,如紧接在上方的C0指令之后读取,将返回A1B2、C3D4、E5F6 
     
 EX: 发送 DWIN_C101 (0,1);(即AA C1 01 00 00 00 01 CC 33 C3 3C)
     接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     00 01 -置点的数目,每点3个字,最多13653个点
     支持该指令的C0数据格式定义为(u16 X,u16 Y,u16 Color)     
     如先发送AA C0 00 00 00 80 00 80 F8 00 CC 33 C3 3C,再发送AA C1 01 00 00 00 01 CC 33 C3 3C会在当前界面的
     (128,128)处显示一个红色的点    
     
 EX: 发送 DWIN_C102 (0,2);(即AA C1 02 00 00 00 02 CC 33 C3 3C)
     接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     00 02 -连线的数目,每条线5个字,最多8191条线
     支持该指令的C0数据格式定义为(u16 XS,u16 YS,u16 XE,u16 YE,u16 Color)
     如先发送AA C0 00 00 00 80 00 80 00 F0 00 F0 F8 00  01 12 00 10 00 56 00 30 FF FF CC 33 C3 3C,
     再发送AA C1 02 00 00 00 02 CC 33 C3 3C会在当前界面的从(128,128)到(240,240)处显示一条红色的线,
     从(274,16)到(240,240)处显示一条红色的线  
     
 EX: 发送 DWIN_C103 (0,80,512,11,1,5,32,0xF800);
     (即AA C1 03 00 00 00 50 02 00 00 0B 01 05 20 F8 00 CC 33 C3 3C)
     接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     00 50 -显示起始位置的X坐标80  
     02 00 -显示Y坐标的0点(最低点)位置512,实际连线点坐标＝Y-Ly
     00 0B -连线的数目11,取值范围0x0000-0x9FFF,每条线1个字,最多40960条线,预存12个点即可连11条线
     01 -读缓冲区的点间隔,取值范围0x01-0xFF,即每连1条线后,Address=Address+D_X
     05 -显示的X坐标增量,取值范围0x01-0x0F,即每连1条线后,X=X+Dis_X
     20 -Y轴放大倍数32,取值范围0x00-0xFF,单位为1/16,最大放大15倍,K_y=32对应Y轴放大2倍
     F8 00 -显示线条的颜色为红色,不会改变系统调色板属性
     支持该指令的C0数据格式定义为(u16 Ly),Ly为点的高度     
     如先发送AA C0 00 00 00 87 00 86 00 86 00 73 00 75 00 76 00 86 00 86 00 7B 00 79 00 77 00 40 CC 33 C3 3C
     再发送AA C1 03 00 00 00 50 02 00 00 0B 01 05 20 F8 00 CC 33 C3 3C会在当前界面显示一条有11条线段的折线图,
     起始坐标为(80,242)起始Y坐标为242(0x0200-2*0x87=0xF2),连线后续点(85,244)、(90,244)、(95,282)等
     X点每连1条线后向右平移5个像素,Y坐标值等于Y0-2*Ly(K_y=32放大2倍)
 
 EX: 发送 DWIN_C104 (0x80,80,512,11,5,0xFFFF,0x00,0xF800);
     (即AA C1 04 00 80 00 50 02 00 00 0B 01 05 FF FF 00 00 F8 00 CC 33 C3 3C)
     接收 无
 其中00 80 -本窗口将要显示的曲线的首地址<Addr1>,暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     00 50 -显示起始位置的X坐标80  
     02 00 -显示Y坐标的0点(最低点)位置512,实际连线点坐标＝Y-Ly
     00 0B -连线的数目11,取值范围0x0000-0x9FFF,每条线1个字,最多40960条线,预存12个点即可连11条线
     01 -读缓冲区的点间隔固定为1,自动固定写01
     05 -显示的X坐标增量,取值范围0x01-0x0F,即每连1条线后,X=X+Dis_X
     FF FF -显示曲线的颜色<Color1>白色,不改变系统调色板属性
     00 00 -本窗口将要擦除的历史曲线的首地址<Addr0>,取值范围同<Addr1>
     F8 00 -曲线区域的背景色<Color0>,假设为红色,不改变系统调色板属性
     支持该指令的C0数据格式定义为(u16 Ly),Ly为点的高度     
     如在将全屏清屏为红色后,
     先发送AA C0 00 00 00 87 00 86 00 86 00 85 00 83 00 82 00 80 00 7E 00 7C 00 7A 00 78 00 77 CC 33 C3 3C
     和    AA C0 00 80 00 73 00 73 00 73 00 73 00 74 00 76 00 77 00 79 00 7B 00 7D 00 7F 00 81 CC 33 C3 3C
     再发送AA C1 04 00 00 00 50 02 00 00 0B 01 05 FF FF 00 80 F8 00 CC 33 C3 3C会显示一段白色的折线图,
     起始坐标为(80,377)起始Y坐标为377(0x0200-0x87=0x0179),连线后续点(85,378)、(90,378)、(95,379)等
     之后再发送AA C1 04 00 80 00 50 02 00 00 0B 01 05 FF FF 00 00 F8 00 CC 33 C3 3C会显示另外一段白色的折线图,
     起始坐标为(80,397)起始Y坐标为397(0x0200-0x73=0x018D),连线后续点(85,397)、(90,397)、(95,397)等
     由于每连一个点1(由Addr1 和Color1 确定)之前,先把对应的原来的点0(由Addr0 和Color0 确定)擦除,
     实现变换过程中无闪烁,采用115200bps 通信速率时,本指令可以达到的折线显示速度极限大约是5500点/秒
         
 EX: 发送 DWIN_C105 (0,80,512,11,1,5,2,1,0xF800);
     (即AA C1 05 00 00 00 50 02 00 00 0B 01 05 02 01 F8 00 CC 33 C3 3C)
     接收 无
 其中00 00 -同C103
     00 50 -同C103 
     02 00 -同C103
     00 0B -同C103
     01 -同C103
     05 -同C103
     02 -Y轴放大倍数分子M_y 2,取值范围0x00-0xFF
     01 -Y轴放大倍数分母D_y 1,取值范围0x00-0xFF,最大放大255倍,Y轴放大2倍=M_y/D_y=2
     F8 00 -同C103
     支持该指令的C0数据格式定义为(u16 Ly),Ly为点的高度     
     如先发送AA C0 00 00 00 87 00 86 00 86 00 73 00 75 00 76 00 86 00 86 00 7B 00 79 00 77 00 40 CC 33 C3 3C
     再发送AA C1 05 00 00 00 50 02 00 00 0B 01 05 02 01 F8 00 CC 33 C3 3C会在当前界面显示一条有11条线段的折线图,
     起始坐标为(80,242)起始Y坐标为242(0x0200-2*0x87=0xF2),连线后续点(85,244)、(90,244)、(95,282)等
     X点每连1条线后向右平移5个像素,Y坐标值等于Y0-2*Ly(M_y/D_y=2 放大2倍)

 EX: 发送 DWIN_C106 (0,80,256,11,1,5,2,1,0xF800,0,500);
     (即AA C1 06 00 00 00 50 01 00 00 0B 01 05 01 01 F8 00 00 00 01 F4 CC 33 C3 3C)
     接收 无
 其中00 00 -同C105
     00 50 -同C105 
     01 00 -同C105
     00 0B -同C105
     01 -同C105
     05 -同C105
     02 -同C105
     01 -同C105
     F8 00 -同C105
     00 00 -Y 轴下限坐标0 窗口下限,即最上方的Y坐标 
     01 F4 -Y 轴上限坐标500 窗口上限,即最下方的Y坐标 
     支持该指令的C0数据格式定义为(u16 Ly),Ly.15 为连线方向,0=正向,1=负向; 如Ly=0x8010 表示负向高度16
		 Ly.14-Ly.0 为连线高度     
     如先发送AA C0 00 00 80 87 80 86 80 86 80 73 80 75 80 76 80 86 80 86 80 7B 80 79 80 77 80 40 CC 33 C3 3C
     再发送AA C1 06 00 00 00 50 01 00 00 0B 01 05 02 01 F8 00 00 00 01 F4 CC 33 C3 3C会在当前界面显示一条折线图,
     起始坐标为(80,526)起始Y坐标为526(0x0100+2*0x87=0x020E),准备连线后续点(85,524)、(90,524)、(95,486)等
     X点每连1条线后向右平移5个像素,Y坐标值等于Y0+2*Ly(M_y/D_y=2 放大2倍),
     窗口下限0(最上方Y坐标),窗口下限500(最下方Y坐标),将准备的处于Y轴限制范围0-500之内的点连线
  
 EX: 发送 DWIN_C10700 (0,150,160);(即AA C1 07 00 00 00 00 96 00 A0 CC 33 C3 3C)
 	   接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     00 96 -置点缓冲区对应屏幕窗口的X方向宽度(点阵像素值),0x0000-0x0FFFF
     00 A0 -置点缓冲区对应屏幕窗口的Y方向宽度(点阵像素值),0x0000-0x0FFF
     清空置点缓冲区(150*160)区域
     置点缓冲区占据的RAM地址大小＝(X*Y)/16,如用户从暂存缓冲区的0x0000位置开始,开辟了一个150*160的置点缓冲区,
     那么占据暂存缓冲区的地址空间为：0x0000-0x05DB
 
 EX: 发送 DWIN_C10701 (0,150,160,80,80,0xF800,0x11,DAT,6);有u16 DAT[6]={80,80,96,96,112,112};
     (即AA C1 07 01 00 00 00 96 00 A0 00 50 00 50 F8 00 11 00 50 00 50 00 60 00 60 00 70 00 70 CC 33 C3 3C)
 	   接收 无
 其中00 00 -同上
     00 96 -同上
     00 A0 -同上
     00 50 -置点缓冲区对应屏幕窗口的X坐标XS 80   
     00 50 -置点缓冲区对应屏幕窗口的Y坐标YS 80
     F8 00 -在当前页面上显示用于置点/删除点的颜色红色,不改变系统调色板属性
     11 -置点模式MODE,为在置点缓冲区和当前页面同时置点
     00 50 00 50/00 60 00 60/00 70 00 70-置点位置Xi和Yi,越界不置点,对应当前页面实际显示位置 X=XS+Xi Y=YS+Yi
     在暂存缓冲区和终端显示3个红色的点,坐标值为(160,160)、(176,176)、(192,192)
     160为0x50+0x50=0xA0得出,坐标值都没有超出XY方向的最大限度
     置点模式MODE说明：
     0x00 -仅在置点缓冲区删除点
     0x01 -仅在置点缓冲区置点
     0x10 -在置点缓冲区和当前页面同时删除点		
		 0x11 -在置点缓冲区和当前页面同时置点
		 *P 为存有需要存入暂存缓冲区的数组如u16 DAT[2]={0x50,0x50}
		 Size 为从该数组中依次取出发送的字的个数,最小值为2
		   
 EX: 发送 DWIN_C10702 (0,150,160,80,80,0xF800);
     (即AA C1 07 02 00 00 00 96 00 A0 00 50 00 50 F8 00 CC 33 C3 3C)
 	   接收 无
 其中00 00 -同上
     00 96 -同上
     00 A0 -同上
     00 50 -同上
     00 50 -同上
     F8 00 -同上  
     执行仅在置点缓冲区置点(01模式)再恢复到当前页面之前,必须先要清空置点缓冲区
     本指令主要提供用户“图层”来灵活、方便的实现一些纯色图标的操作,如十字光标的移动
     先发送AA C1 07 00 00 00 00 96 00 A0 CC 33 C3 3C
     再发送AA C1 07 01 00 00 00 96 00 A0 00 50 00 50 F8 00 01 00 50 00 50 00 60 00 60 00 70 00 70 CC 33 C3 3C
     发送  AA C1 07 02 00 00 00 96 00 A0 00 50 00 50 F8 00 CC 33 C3 3C
     可在当前界面显示如C00701的11模式相同的3个红色点
 
 EX: 发送 DWIN_C108 (0,1);(即AA C1 08 00 00 01 CC 33 C3 3C)
 	   接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     01 -要显示的参数数量<Parameter_N>,取值范围0x01-0xFF
     支持该指令的C0数据格式较为复杂,详细定义请见C108指令集     
     先发送AA C0 00 00 33 05 00 00 00 00 F8 00 00 1F FF FE 1D C6 CC 33 C3 3C
     再发送AA C1 08 00 00 01 CC 33 C3 3C
     可在当前界面(0,0)16*32点阵显示数据-123.450
     
 EX: 发送 DWIN_C110 (0,2);(即AA C1 10 00 00 02 CC 33 C3 3C)
 	   接收 无
 其中00 00 -暂存缓冲区(RAM)的首地址(字地址),共40KWord,取值范围0x0000-0x9FFF
     02 -要连续显示的指令帧数目<Frame_Number>,取值范围0x01-0xFF
     支持该指令的C0指令帧数据格式定义如下：
     -------------------------------------------------------------------------
     |       首地址       |    定义   |    帧结构(帧长度+指令＋数据) 
     -------------------------------------------------------------------------
     |<Address>           |第1个指令帧|02 70 00 01(显示第1号界面)
     -------------------------------------------------------------------------
     |<Address>+0x80      |第2个指令帧|09 55 00 00 00 00 30 31 32 33(显示0123)
     -------------------------------------------------------------------------
     |<Address……>         |……         |……
     -------------------------------------------------------------------------
     |<Address>+0x80×(K-1)|第K个指令帧|09 53 00 64 00 64 34 35 36 37(显示4567)
     -------------------------------------------------------------------------
     先发送AA C0 00 00 09 55 00 00 00 00 30 31 32 33 CC 33 C3 3C
     和    AA C0 00 80 09 53 00 64 00 64 34 35 36 37 CC 33 C3 3C
     再发送AA C1 10 00 00 02 CC 33 C3 3C
     可在当前界面(0,0)用16*32点阵显示数据0123,同时在(100,100)用8*8点阵显示4567           
     本指令用于在当前页面同时刷新显示较多的参数,主要解决了由通信延时(尤其是低波特率时)
     造成参数刷新过程不同步的问题
--------------------------------------------------------------------------*/
extern void DWIN_C0 (u16 Addr,u16 *P,u8 Size);

extern void DWIN_C2 (u16 Addr,u16 Data_Length);

extern void DWIN_C101 (u16 Addr,u16 Pixel_Number);
extern void DWIN_C102 (u16 Addr,u16 Line_Number);
extern void DWIN_C103 (u16 Addr,u16 X,u16 Y,u16 Line_Number,u8 D_X,u8 Dis_X,u8 K_y,u16 Color);
extern void DWIN_C104 (u16 Addr1,u16 X,u16 Y,u16 Line_Number,u8 Dis_X,u16 Color1,u16 Addr0,u16 Color0);
extern void DWIN_C105 (u16 Addr,u16 X,u16 Y,u16 Line_Number,u8 D_X,u8 Dis_X,u8 M_y,u8 D_y,u16 Color);
extern void DWIN_C106 (u16 Addr,u16 X,u16 Y,u16 Line_Number,u8 D_X,u8 Dis_X,u8 M_y,u8 D_y,u16 Color,u16 Ymin,u16 Ymax);

extern void DWIN_C10700 (u16 Addr,u16 X_Len,u16 Y_Len);
extern void DWIN_C10701 (u16 Addr,u16 X_Len,u16 Y_Len,u16 X,u16 Y,u16 Color,u8 MODE,u16 *P,u8 Size);
extern void DWIN_C10702 (u16 Addr,u16 X_Len,u16 Y_Len,u16 X,u16 Y,u16 Color);

extern void DWIN_C108 (u16 Addr,u8 Parameter_N);

extern void DWIN_C110 (u16 Addr,u8 Frame_Number);