# system3rdb <system3rd@gmail.com>, 2021.
# brian park <gouache95@gmail.com>, 2021.
# 이정희 <daemul72@gmail.com>, 2022.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2022-02-28 15:55+0000\n"
"Last-Translator: 이정희 <daemul72@gmail.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/klipper/canbus/ko/>\n"
"Language: ko\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.11.1-dev\n"

msgid "This document describes Klipper's CAN bus support."
msgstr "이 문서는 Klipper의 CAN bus 지원에 대해 설명합니다."

msgid "Device Hardware"
msgstr "장치 하드웨어"

msgid "Host Hardware"
msgstr "Host Hardware"

msgid ""
"In order to use a CAN bus, it is necessary to have a host adapter. There are"
" currently two common options:"
msgstr "CAN bus를 사용하려면, 호스트 어댑터가 필요합니다. 현재까지 두 가지 일반적인 옵션이 있습니다 :"

msgid ""
"Use a [Waveshare Raspberry Pi CAN hat](https://www.waveshare.com/rs485-can-"
"hat.htm) or one of its many clones."
msgstr ""
"[Waveshare Raspberry Pi CAN hat](https://www.waveshare.com/rs485-can-"
"hat.htm) 을 사용하거나, 다른 클론제품을 사용합니다."

msgid ""
"It is also necessary to configure the host operating system to use the "
"adapter. This is typically done by creating a new file named "
"`/etc/network/interfaces.d/can0` with the following contents:"
msgstr ""
"또한 어댑터를 사용하도록 호스트 운영 체제를 구성해야 합니다. 이것은 일반적으로 다음과 같이 "
"`/etc/network/interfaces.d/can0` 이라는 새 파일을 생성하여 수행됩니다:"

msgid ""
"Note that the \"Raspberry Pi CAN hat\" also requires [changes to "
"config.txt](https://www.waveshare.com/wiki/RS485_CAN_HAT)."
msgstr ""
"Note : \"Raspberry Pi CAN hat\"도 마찬가지로 [changes to "
"config.txt](https://www.waveshare.com/wiki/RS485_CAN_HAT) 변경이 필요합니다."

msgid "Terminating Resistors"
msgstr "종단 저항"

msgid ""
"A CAN bus should have two 120 ohm resistors between the CANH and CANL wires."
" Ideally, one resistor located at each the end of the bus."
msgstr ""
"CAN bus 에는 CANH와 CANL 와이어 사이에 2개의 120옴 저항이 있어야 합니다. 이상적으로는 각 끝에 하나의 저항이 "
"있습니다."

msgid ""
"Note that some devices have a builtin 120 ohm resistor (for example, the "
"\"Waveshare Raspberry Pi CAN hat\" has a soldered on resistor that can not "
"be easily removed). Some devices do not include a resistor at all. Other "
"devices have a mechanism to select the resistor (typically by connecting a "
"\"pin jumper\"). Be sure to check the schematics of all devices on the CAN "
"bus to verify that there are two and only two 120 Ohm resistors on the bus."
msgstr ""
"일부 장치에는 120옴 저항이 내장되어 있습니다.(예: \"Waveshare Raspberry Pi CAN 모자\"에는 쉽게 제거할 수 "
"없는 저항이 납땜되어 있음). 일부 장치에는 저항이 전혀 포함되어 있지 않습니다. 다른 장치에는 저항을 선택하는 메커니즘이 "
"있습니다(일반적으로 \"핀 점퍼\"로 연결). CAN bus에 있는 모든 장치의 회로도를 확인하여 2개의 120 Ohm 저항이 있는지 "
"확인하십시오."

msgid ""
"To test that the resistors are correct, one can remove power to the printer "
"and use a multi-meter to check the resistance between the CANH and CANL "
"wires - it should report ~60 ohms on a correctly wired CAN bus."
msgstr ""
"저항이 올바른지 테스트하기 위해 프린터의 전원을 끄고 멀티미터를 사용하여 CANH와 CANL 와이어 사이의 저항을 확인할 수 있습니다. "
"올바르게 배선된 CAN bus에서 ~60옴이 나와야 합니다."

msgid "Finding the canbus_uuid for new micro-controllers"
msgstr "새로운 마이크로 컨트롤러를 위한 canbus_uuid 찾기"

msgid ""
"Each micro-controller on the CAN bus is assigned a unique id based on the "
"factory chip identifier encoded into each micro-controller. To find each "
"micro-controller device id, make sure the hardware is powered and wired "
"correctly, and then run:"
msgstr ""
"CAN bus의 각 마이크로 컨트롤러에는 각 마이크로 컨트롤러에 인코딩된 공장 칩 식별자를 기반으로 고유한 ID가 할당됩니다. 각 "
"마이크로 컨트롤러 장치 ID를 찾으려면 하드웨어에 전원이 공급되고 올바르게 연결되었는지 확인한 후 다음을 실행합니다:"

msgid ""
"If uninitialized CAN devices are detected the above command will report "
"lines like the following:"
msgstr "초기화되지 않은 CAN 장치가 감지되면 위의 명령 후 다음과 같은 행을 보여줍니다 :"

msgid ""
"Each device will have a unique identifier. In the above example, "
"`11aa22bb33cc` is the micro-controller's \"canbus_uuid\"."
msgstr ""
"각 장치에는 고유한 식별자가 있습니다. 위의 예에서는 `11aa22bb33cc`가 마이크로 컨트롤러의 \"canbus_uuid\"입니다."

msgid ""
"Note that the `canbus_query.py` tool will only report uninitialized devices "
"- if Klipper (or a similar tool) configures the device then it will no "
"longer appear in the list."
msgstr ""
"`canbus_query.py `도구는 초기화되지 않은 장치만 보고합니다. 만약 Klipper(또는 유사한 도구)가 장치를 구성하면 더 "
"이상 목록에 나타나지 않습니다."

msgid "Configuring Klipper"
msgstr "Klipper 구성 중"

msgid ""
"Update the Klipper [mcu configuration](Config_Reference.md#mcu) to use the "
"CAN bus to communicate with the device - for example:"
msgstr ""
"장치와 통신하기 위해 CAN bus를 사용하도록 Klipper [mcu "
"configuration](Config_Reference.md#mcu) 을 업데이트합니다. 예를 들면 다음과 같습니다:"

msgid ""
"auto can0\n"
"iface can0 can static\n"
"    bitrate 500000\n"
"    up ifconfig $IFACE txqueuelen 128\n"
msgstr ""
"auto can0\n"
"iface can0 can static\n"
"    bitrate 500000\n"
"    up ifconfig $IFACE txqueuelen 128\n"

msgid "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"
msgstr "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"

msgid ""
"[mcu my_can_mcu]\n"
"canbus_uuid: 11aa22bb33cc\n"
msgstr ""
"[mcu my_can_mcu]\n"
"canbus_uuid: 11aa22bb33cc\n"

#: docs/CANBUS.md:block 1 (header)
msgid "CANBUS"
msgstr "CANBUS"

#: docs/CANBUS.md:block 8 (ordered list)
msgid ""
"Use a USB CAN adapter (for example <https://hacker-"
"gadgets.com/product/cantact-usb-can-adapter/>). There are many different USB"
" to CAN adapters available - when choosing one, we recommend verifying it "
"can run the [candlelight firmware](https://github.com/candle-"
"usb/candleLight_fw). (Unfortunately, we've found some USB adapters run "
"defective firmware and are locked down, so verify before purchasing.)"
msgstr ""

#: docs/CANBUS.md:block 5 (paragraph)
msgid ""
"To compile for CAN, run `make menuconfig` and select \"CAN bus\" as the "
"communication interface. Finally, compile the micro-controller code and "
"flash it to the target board."
msgstr ""

#: docs/CANBUS.md:block 26 (header)
msgid "USB to CAN bus bridge mode"
msgstr ""

#: docs/CANBUS.md:block 27 (paragraph)
msgid ""
"Some micro-controllers support selecting \"USB to CAN bus bridge\" mode "
"during \"make menuconfig\". This mode may allow one to use a micro-"
"controller as both a \"USB to CAN bus adapter\" and as a Klipper node."
msgstr ""

#: docs/CANBUS.md:block 28 (paragraph)
msgid ""
"When Klipper uses this mode the micro-controller appears as a \"USB CAN bus "
"adapter\" under Linux. The \"Klipper bridge mcu\" itself will appear as if "
"was on this CAN bus - it can be identified via `canbus_query.py` and "
"configured like other CAN bus Klipper nodes. It will appear alongside other "
"devices that are actually on the CAN bus."
msgstr ""

#: docs/CANBUS.md:block 29 (paragraph)
msgid "Some important notes when using this mode:"
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"The \"bridge mcu\" is not actually on the CAN bus. Messages to and from it "
"do not consume bandwidth on the CAN bus. The mcu can not be seen by other "
"adapters that may be on the CAN bus."
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"It is necessary to configure the `can0` (or similar) interface in Linux in "
"order to communicate with the bus. However, Linux CAN bus speed and CAN bus "
"bit-timing options are ignored by Klipper. Currently, the CAN bus frequency "
"is specified during \"make menuconfig\" and the bus speed specified in Linux"
" is ignored."
msgstr ""

#: docs/CANBUS.md:block 4 (paragraph)
msgid ""
"Klipper currently supports CAN on stm32 and rp2040 chips. In addition, the "
"micro-controller chip must be on a board that has a CAN transceiver."
msgstr ""

#: docs/CANBUS.md:block 20 (code)
msgid "Found canbus_uuid=11aa22bb33cc, Application: Klipper\n"
msgstr ""

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
"`can0` interface. To ensure proper handling of FIRMWARE_RESTART and RESTART "
"commands, it is recommended to replace `auto` with `allow-hotplug` in the "
"`/etc/network/interfaces.d/can0` file. For example:"
msgstr ""

#: docs/CANBUS.md:block 31 (code)
msgid ""
"allow-hotplug can0\n"
"iface can0 can static\n"
"    bitrate 500000\n"
"    up ifconfig $IFACE txqueuelen 128\n"
msgstr ""

#~ msgid ""
#~ "Klipper currently only supports CAN on stm32 chips. In addition, the micro-"
#~ "controller chip must support CAN and it must be on a board that has a CAN "
#~ "transceiver."
#~ msgstr ""
#~ "Klipper는 현재 stm32 칩에서만 CAN을 지원합니다. 또한 마이크로 컨트롤러 칩은 CAN을 지원해야 하며 CAN 트랜시버가 "
#~ "보드에 있어야 합니다."

#~ msgid "Found canbus_uuid=11aa22bb33cc\n"
#~ msgstr "Found canbus_uuid=11aa22bb33cc\n"

#~ msgid ""
#~ "Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
#~ "`can0` interface. Generally, this may require running commands such as \"ip "
#~ "up\" to restart the interface. Thus, Klipper FIRMWARE_RESTART commands (or "
#~ "regular RESTART after a config change) may require restarting the `can0` "
#~ "interface."
#~ msgstr ""

#~ msgid ""
#~ "To compile for CAN, run \"make menuconfig\" and select \"CAN bus\" as the "
#~ "communication interface. Finally, compile the micro-controller code and "
#~ "flash it to the target board."
#~ msgstr ""
#~ "CAN용으로 컴파일하려면 \"make menuconfig\"를 실행하고 communication interface에서 \"CAN "
#~ "bus\"를 선택하십시오. 마지막으로 마이크로 컨트롤러 코드를 컴파일하고 대상 보드에 플래시합니다."

#~ msgid ""
#~ "Use a USB CAN adapter (for example [https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/](https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/)). There are many different USB"
#~ " to CAN adapters available - when choosing one, we recommend verifying it "
#~ "can run the [candlelight firmware](https://github.com/candle-"
#~ "usb/candleLight_fw). (Unfortunately, we've found some USB adapters run "
#~ "defective firmware and are locked down, so verify before purchasing.)"
#~ msgstr ""
#~ "USB CAN 어댑터 사용합니다. (예를들어 [https://hacker-gadgets.com/product/cantact-usb-"
#~ "can-adapter/](https://hacker-gadgets.com/product/cantact-usb-can-adapter/))."
#~ " 사용할 수 있는 USB-CAN 어댑터는 다양합니다. 하나를 선택할 때, [candlelight "
#~ "firmware](https://github.com/candle-usb/candleLight_fw) 를 실행할 수 있는지 확인하는 것이 "
#~ "좋습니다. (안타깝게도 일부 USB 어댑터가 결함이 있는 펌웨어를 실행하고 잠겨 있는 것으로 확인되었으므로 구매하기 전에 확인하십시오.)"
