# brian park <gouache95@gmail.com>, 2021.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2021-08-20 02:20+0000\n"
"Last-Translator: brian park <gouache95@gmail.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/klipper/features/ko/>\n"
"Language: ko\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.8-dev\n"

msgid "Klipper has several compelling features:"
msgstr "Klipper 에는 다음과 같이 몇가지 매력적인 기능이 있습니다:"

msgid ""
"High precision stepper movement. Klipper utilizes an application processor "
"(such as a low-cost Raspberry Pi) when calculating printer movements. The "
"application processor determines when to step each stepper motor, it "
"compresses those events, transmits them to the micro-controller, and then "
"the micro-controller executes each event at the requested time. Each stepper"
" event is scheduled with a precision of 25 micro-seconds or better. The "
"software does not use kinematic estimations (such as the Bresenham "
"algorithm) - instead it calculates precise step times based on the physics "
"of acceleration and the physics of the machine kinematics. More precise "
"stepper movement translates to quieter and more stable printer operation."
msgstr ""
"고정밀 스테퍼 동작. Klipper 는 3D 프린터의 움직임을 계산할 때 라즈베리파이 같은 저렴한 애플리케이션 프로세서를 활용합니다. "
"애플리케이션 프로세서는 각 스테퍼 모터를 언제 움직여야 하는지 결정하고 해당 이벤트를 압축하여 마이크로 컨트롤러에 전송한 다음 마이크로 "
"컨트롤러가 요청된 시간에 각 이벤트를 실행합니다. 각 스테퍼 이벤트는 25 마이크로초 이상의 정밀도로 스케줄링 됩니다. 소프트웨어는 "
"운동학적 추정(예: Bresenham 알고리즘)을 사용하지 않습니다. 대신 가속 물리학 및 기계 운동학 물리학을 기반으로 정확한 단계 "
"시간을 계산합니다. 더 정밀한 스테퍼 움직임은 더 조용하고 안정적인 프린터 작동으로 이어집니다."

msgid ""
"Klipper supports printers with multiple micro-controllers. For example, one "
"micro-controller could be used to control an extruder, while another "
"controls the printer's heaters, while a third controls the rest of the "
"printer. The Klipper host software implements clock synchronization to "
"account for clock drift between micro-controllers. No special code is needed"
" to enable multiple micro-controllers - it just requires a few extra lines "
"in the config file."
msgstr ""
"Klipper는 다수개의 마이크로 컨트롤러가 있는 프린터를 지원합니다. 예를 들어, 하나의 마이크로 컨트롤러는 익스트루더를 제어하는데 "
"사용되고 다른 하나는 프린터의 히터를 제어하고 세 번째는 나머지 프린터를 제어하는데 사용할 수 있습니다. Klipper 호스트 "
"소프트웨어는 마이크로 컨트롤러간의 클럭 드리프트를 계산하기 위해 클록 동기화를 구현합니다.여러 마이크로 컨트롤러를 활성화하는데 특별한 "
"코드는 필요하지 않습니다. 구성 파일에 몇 줄만 추가하면 됩니다."

msgid ""
"Configuration via simple config file. There's no need to reflash the micro-"
"controller to change a setting. All of Klipper's configuration is stored in "
"a standard config file which can be easily edited. This makes it easier to "
"setup and maintain the hardware."
msgstr ""
"간단한 config 파일을 통한 구성. 설정을 변경하기 위해 마이크로 컨트롤러를 다시 펌웨어 업데이트할 필요가 없습니다. Klipper의"
" 모든 구성은 쉽게 편집할 수 있는 표준 config 파일에 저장됩니다. 이렇게 하면 하드웨어를 더 쉽게 설정하고 유지 관리할 수 "
"있습니다."

msgid ""
"Klipper supports \"Smooth Pressure Advance\" - a mechanism to account for "
"the effects of pressure within an extruder. This reduces extruder \"ooze\" "
"and improves the quality of print corners. Klipper's implementation does not"
" introduce instantaneous extruder speed changes, which improves overall "
"stability and robustness."
msgstr ""
"Klipper는 익스트루더 내에 압력의 영향을 설명하는 메커니즘인 \"Smooth Pressure Advance\"를 지원합니다. 이것은"
" 익스트루더의 \"노즐 흘러내림\" 을 줄이고 인쇄 모서리의 품질을 향상시킵니다. Klipper의 구현은 전반적인 안정성과 견고성을 "
"향상시키는 즉각적인 익스트루더 속도 변경을 도입하지 않습니다."

msgid ""
"Klipper supports \"Input Shaping\" to reduce the impact of vibrations on "
"print quality. This can reduce or eliminate \"ringing\" (also known as "
"\"ghosting\", \"echoing\", or \"rippling\") in prints. It may also allow one"
" to obtain faster printing speeds while still maintaining high print "
"quality."
msgstr ""
"Klipper는 인쇄 품질에 대한 진동의 영향을 줄이기 위해 \"Input Shaping\"을 지원합니다. 이렇게 하면 인쇄물에서 "
"\"진동형 무늬\" (\"고스팅\", \"에코잉\" 또는 \"리플링\"이라고도 함)을 줄이거나 제거할 수 있습니다. 또한 높은 인쇄 "
"품질을 유지하면서 더 빠른 인쇄 속도를 얻을 수 있습니다."

msgid ""
"Klipper uses an \"iterative solver\" to calculate precise step times from "
"simple kinematic equations. This makes porting Klipper to new types of "
"robots easier and it keeps timing precise even with complex kinematics (no "
"\"line segmentation\" is needed)."
msgstr ""
"Klipper는 \"iterative solver\"를 사용하여 간단한 운동 방정식에서 정확한 단계 시간을 계산합니다. 이를 통해 "
"Klipper를 새로운 유형의 로봇에 쉽게 이식할 수 있으며 복잡한 운동학에서도 정확한 타이밍을 유지할 수 있습니다(\"Line "
"segmentation\" 이 필요하지 않음)."

msgid ""
"Portable code. Klipper works on ARM, AVR, and PRU based micro-controllers. "
"Existing \"reprap\" style printers can run Klipper without hardware "
"modification - just add a Raspberry Pi. Klipper's internal code layout makes"
" it easier to support other micro-controller architectures as well."
msgstr ""
"이식 가능한 코드. Klipper는 ARM, AVR 및 PRU 기반 마이크로 컨트롤러에서 작동합니다. 기존 \"reprap\" 스타일 "
"프린터는 하드웨어 수정 없이 Klipper를 실행할 수 있습니다. Raspberry Pi를 추가하기만 하면 됩니다. Klipper의 내부"
" 코드 레이아웃을 통해 다른 마이크로 컨트롤러 아키텍처도 쉽게 지원할 수 있습니다."

msgid ""
"Simpler code. Klipper uses a very high level language (Python) for most "
"code. The kinematics algorithms, the G-code parsing, the heating and "
"thermistor algorithms, etc. are all written in Python. This makes it easier "
"to develop new functionality."
msgstr ""
"더 간단한 코드. Klipper는 대부분의 코드에 대해 매우 높은 수준의 언어(Python)를 사용합니다. 운동학 알고리즘, gcode "
"해석, 가열 및 온도센서 알고리즘 등은 모두 Python으로 작성되었습니다. 이를 통해 새로운 기능을 더 쉽게 개발할 수 있습니다."

msgid ""
"Custom programmable macros. New G-Code commands can be defined in the "
"printer config file (no code changes are necessary). Those commands are "
"programmable - allowing them to produce different actions depending on the "
"state of the printer."
msgstr ""
"사용자 정의 가능한 매크로. 새로운 gcode 명령을 프린터 구성 파일에서 정의할 수 있습니다 (코드 변경이 필요하지 않음). 이러한 "
"명령은 프로그래밍할 수 있으므로 프린터 상태에 따라 다른 작업을 생성할 수 있습니다."

msgid ""
"Builtin API server. In addition to the standard G-Code interface, Klipper "
"supports a rich JSON based application interface. This enables programmers "
"to build external applications with detailed control of the printer."
msgstr ""
"내장 API 서버. 표준 gcode 인터페이스 외에도 Klipper는 풍부한 JSON 기반 애플리케이션 인터페이스를 지원합니다. 이를 "
"통해 프로그래머는 프린터를 세부적으로 제어하여 외부 응용 프로그램을 구축할 수 있습니다."

msgid "Additional features"
msgstr "Additional features"

msgid "Klipper supports many standard 3d printer features:"
msgstr "Klipper는 다양한 표준 3D 프린터 기능을 지원합니다:"

msgid ""
"Works with Octoprint. This allows the printer to be controlled using a "
"regular web-browser. The same Raspberry Pi that runs Klipper can also run "
"Octoprint."
msgstr ""
"Octoprint와 함께 작동합니다. 이를 통해 웹 브라우저를 사용하여 프린터를 제어할 수 있습니다. Raspberry Pi 에서도 "
"Klipper 와 Octoprint를 실행할 수 있습니다."

msgid ""
"Support for multiple extruders. Extruders with shared heaters and extruders "
"on independent carriages (IDEX) are also supported."
msgstr "멀티 익스트루더를 지원합니다. 히터를 공유하는 익스트루더 방식 및 독립 캐리지 상의 익스트루더(IDEX) 방식도 지원됩니다."

msgid ""
"Automatic bed leveling support. Klipper can be configured for basic bed tilt"
" detection or full mesh bed leveling. If the bed uses multiple Z steppers "
"then Klipper can also level by independently manipulating the Z steppers. "
"Most Z height probes are supported, including BL-Touch probes and servo "
"activated probes."
msgstr ""
"오토 베드 레벨링 지원. Klipper는 기본적으로 베드 기울기 감지 또는 전체 메쉬 베드 레벨링을 위해 구성할 수 있습니다. 여러 개의"
" Z축 스테퍼 모터를 사용하는 경우 Klipper는 각각의 Z축 모터를 독립적으로 조작하여 수평을 맞출 수도 있습니다. BL-Touch "
"프로브 및 서보 활성화 프로브를 포함하여 대부분의 Z 높이 프로브가 지원됩니다."

msgid ""
"Automatic delta calibration support. The calibration tool can perform basic "
"height calibration as well as an enhanced X and Y dimension calibration. The"
" calibration can be done with a Z height probe or via manual probing."
msgstr ""
"오토 델타 캘리브레이션 지원. 자동으로 델타 프린터의 높이 보정과 향상된 X 및 Y 치수 보정을 수행할 수 있습니다. 보정은 Z 높이 "
"프로브 또는 수동 프로빙을 통해 수행할 수 있습니다."

msgid "Basic thermal heater protection enabled by default."
msgstr "온도 안전장치 기본적으로 thermal protection 이 활성화되어 있습니다."

msgid ""
"Support for run-time configuration of TMC2130, TMC2208/TMC2224, TMC2209, "
"TMC2660, and TMC5160 stepper motor drivers. There is also support for "
"current control of traditional stepper drivers via AD5206, MCP4451, MCP4728,"
" MCP4018, and PWM pins."
msgstr ""
"TMC2130, TMC2208/TMC2224, TMC2209, TMC2660 및 TMC5160 스테퍼 모터 드라이버의 런타임 구성 지원."
" AD5206, MCP4451, MCP4728, MCP4018 및 PWM 핀을 통한 기존 스테퍼 드라이버의 전류 제어도 지원합니다."

msgid ""
"Support for common LCD displays attached directly to the printer. A default "
"menu is also available. The contents of the display and menu can be fully "
"customized via the config file."
msgstr ""
"프린터에 직접 연결된 일반 LCD 디스플레이를 지원합니다. 기본 메뉴도 있습니다. 디스플레이 및 메뉴의 내용은 config 파일을 통해 "
"완전히 사용자가 정의할 수 있습니다."

msgid ""
"Constant acceleration and \"look-ahead\" support. All printer moves will "
"gradually accelerate from standstill to cruising speed and then decelerate "
"back to a standstill. The incoming stream of G-Code movement commands are "
"queued and analyzed - the acceleration between movements in a similar "
"direction will be optimized to reduce print stalls and improve overall print"
" time."
msgstr ""
"일정한 가속 및 \"look-ahead\" 지원. 모든 프린터의 이동은 정지 상태에서 점차 가속되었다가 다시 정지 상태로 감속됩니다. "
"읽어들이는 gcode 는 순서대로 쌓이고 분석됩니다. 같은 방향으로 이동 할때는 가/감속을 하지 않고 인쇄 시간을 개선하기 위해 "
"최적화됩니다."

msgid ""
"Klipper implements a \"stepper phase endstop\" algorithm that can improve "
"the accuracy of typical endstop switches. When properly tuned it can improve"
" a print's first layer bed adhesion."
msgstr ""
"스테퍼 위상 엔드스톱 지원. Klipper는 일반적인 엔드스톱 스위치의 정확도를 향상시킬 수 있는 \"스테퍼 위상 엔드스톱\" 알고리즘을"
" 구현합니다. 적절히 튜닝하면 첫 레이어 베드 접착력을 향상시킬 수 있습니다."

msgid ""
"Support for measuring and recording acceleration using an adxl345 "
"accelerometer."
msgstr "adxl345 가속도계를 사용한 가속도 측정 및 기록 지원."

msgid ""
"Support for limiting the top speed of short \"zigzag\" moves to reduce "
"printer vibration and noise. See the [kinematics](Kinematics.md) document "
"for more information."
msgstr ""
"짧은 \"지그재그\" 이동의 최고 속도 제한을 지원하여 프린터 진동과 소음을 줄입니다. 자세한 내용은 "
"[kinematics](Kinematics.md) 문서를 참조하십시오."

msgid ""
"Sample configuration files are available for many common printers. Check the"
" [config directory](../config/) for a list."
msgstr ""
"다양한 프린터를 지원하기 위해 sample config 파일을 제공합니다. [config directory](../config/) "
"디렉토리를 확인하십시오."

msgid ""
"To get started with Klipper, read the [installation](Installation.md) guide."
msgstr "Klipper를 시작하려면 [설치](Installation.md) 가이드를 읽으십시오."

msgid "Step Benchmarks"
msgstr "Step Benchmarks"

msgid ""
"Below are the results of stepper performance tests. The numbers shown "
"represent total number of steps per second on the micro-controller."
msgstr "다음은 스테퍼 모터의 성능 테스트 결과입니다. 표시된 숫자는 마이크로 컨트롤러에서 초당 총 스텝수를 나타냅니다."

msgid "Micro-controller"
msgstr "Micro-controller"

msgid "3 steppers active"
msgstr "3 steppers active"

msgid "16Mhz AVR"
msgstr "16Mhz AVR"

msgid "20Mhz AVR"
msgstr "20Mhz AVR"

msgid "Beaglebone PRU"
msgstr "Beaglebone PRU"

msgid "686K"
msgstr "686K"

#: docs/Features.md:block 1 (header)
msgid "Features"
msgstr "Features"

#: docs/Features.md:block 6 (unordered list)
msgid ""
"Standard G-Code support. Common g-code commands that are produced by typical"
" \"slicers\" (SuperSlicer, Cura, PrusaSlicer, etc.) are supported."
msgstr ""

#: docs/Features.md:block 6 (unordered list)
msgid ""
"Support for cartesian, delta, corexy, corexz, hybrid-corexy, hybrid-corexz, "
"rotary delta, polar, and cable winch style printers."
msgstr ""

#: docs/Features.md:block 6 (unordered list)
msgid ""
"Support for common temperature sensors (eg, common thermistors, AD595, "
"AD597, AD849x, PT100, PT1000, MAX6675, MAX31855, MAX31856, MAX31865, BME280,"
" HTU21D, DS18B20, and LM75). Custom thermistors and custom analog "
"temperature sensors can also be configured. One can monitor the internal "
"micro-controller temperature sensor and the internal temperature sensor of a"
" Raspberry Pi."
msgstr ""

#: docs/Features.md:block 6 (unordered list)
msgid ""
"Support for standard fans, nozzle fans, and temperature controlled fans. No "
"need to keep fans running when the printer is idle. Fan speed can be "
"monitored on fans that have a tachometer."
msgstr ""

#: docs/Features.md:block 6 (unordered list)
msgid ""
"Support for filament presence sensors, filament motion sensors, and filament"
" width sensors."
msgstr ""

#: docs/Features.md:block 3 (unordered list)
msgid ""
"Best in class performance. Klipper is able to achieve high stepping rates on"
" both new and old micro-controllers. Even old 8bit micro-controllers can "
"obtain rates over 175K steps per second. On more recent micro-controllers, "
"several million steps per second are possible. Higher stepper rates enable "
"higher print velocities. The stepper event timing remains precise even at "
"high speeds which improves overall stability."
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1 stepper active"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "157K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "99K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "196K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "123K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "471K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "STM32F042"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "814K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "578K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "866K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "708K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1180K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "818K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1273K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "981K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1690K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1385K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1923K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1351K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "2353K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1622K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "2400K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1636K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "2500K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1674K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "3077K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1885K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "3652K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "2459K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "3913K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "2634K"
msgstr ""

#: docs/Features.md:block 11 (paragraph)
msgid ""
"Further details on the benchmarks are available in the [Benchmarks "
"document](Benchmarks.md)."
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "STM32G0B1"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "1103K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "790K"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "SAMD21"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "STM32F103"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "SAM3X8E"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "SAM4S8C"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "LPC1768"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "LPC1769"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "RP2040"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "SAM4E8E"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "SAMD51"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "STM32F407"
msgstr ""

#: docs/Features.md:block 10 (table)
msgid "STM32F446"
msgstr ""

#: docs/Features.md:block 11 (paragraph)
msgid ""
"If unsure of the micro-controller on a particular board, find the "
"appropriate [config file](../config/), and look for the micro-controller "
"name in the comments at the top of that file."
msgstr ""

#~ msgid "Arduino Zero (SAMD21)"
#~ msgstr "Arduino Zero (SAMD21)"

#~ msgid "\"Blue Pill\" (STM32F103)"
#~ msgstr "\"Blue Pill\" (STM32F103)"

#~ msgid "Arduino Due (SAM3X8E)"
#~ msgstr "Arduino Due (SAM3X8E)"

#~ msgid "Duet2 Maestro (SAM4S8C)"
#~ msgstr "Duet2 Maestro (SAM4S8C)"

#~ msgid "Smoothieboard (LPC1768)"
#~ msgstr "Smoothieboard (LPC1768)"

#~ msgid "Smoothieboard (LPC1769)"
#~ msgstr "Smoothieboard (LPC1769)"

#~ msgid "Duet2 Wifi/Eth (SAM4E8E)"
#~ msgstr "Duet2 Wifi/Eth (SAM4E8E)"

#~ msgid "Adafruit Metro M4 (SAMD51)"
#~ msgstr "Adafruit Metro M4 (SAMD51)"

#~ msgid "BigTreeTech SKR Pro (STM32F407)"
#~ msgstr "BigTreeTech SKR Pro (STM32F407)"

#~ msgid "Raspberry Pi Pico (RP2040)"
#~ msgstr ""

#~ msgid "Fysetc Spider (STM32F446)"
#~ msgstr ""

#~ msgid ""
#~ "Best in class performance. Klipper is able to achieve high stepping rates on"
#~ " both new and old micro-controllers. Even old 8bit micro-controllers can "
#~ "obtain rates over 175K steps per second. On more recent micro-controllers, "
#~ "rates over 500K steps per second are possible. Higher stepper rates enable "
#~ "higher print velocities. The stepper event timing remains precise even at "
#~ "high speeds which improves overall stability."
#~ msgstr ""
#~ "동급 최고의 성능. Klipper는 신규 및 기존 마이크로 컨트롤러 모두에서 높은 스테핑 속도를 달성할 수 있습니다. 심지어 오래된 "
#~ "8비트 마이크로 컨트롤러도 초당 175K 단계 이상의 속도를 얻을 수 있습니다. 최신 마이크로 컨트롤러에서는 초당 500K 단계 이상의 "
#~ "속도가 가능합니다. 더 빠른 스테퍼 속도는 더 빠른 인쇄 속도를 가능하게 합니다. 스테퍼 이벤트 타이밍은 고속에서도 정밀하게 유지되어 "
#~ "전반적인 안정성을 향상시킵니다."

#~ msgid "Fastest step rate"
#~ msgstr "Fastest step rate"

#~ msgid "154K"
#~ msgstr "154K"

#~ msgid "102K"
#~ msgstr "102K"

#~ msgid "192K"
#~ msgstr "192K"

#~ msgid "127K"
#~ msgstr "127K"

#~ msgid "234K"
#~ msgstr "234K"

#~ msgid "217K"
#~ msgstr "217K"

#~ msgid "387K"
#~ msgstr "387K"

#~ msgid "360K"
#~ msgstr "387K"

#~ msgid "438K"
#~ msgstr "438K"

#~ msgid "564K"
#~ msgstr "564K"

#~ msgid "574K"
#~ msgstr "574K"

#~ msgid "661K"
#~ msgstr "661K"

#~ msgid "680K"
#~ msgstr "680K"

#~ msgid "761K"
#~ msgstr "761K"

#~ msgid "692K"
#~ msgstr "692K"

#~ msgid "922K"
#~ msgstr "922K"

#~ msgid "711K"
#~ msgstr "711K"

#~ msgid ""
#~ "On AVR platforms, the highest achievable step rate is with just one stepper "
#~ "stepping. On the SAMD21 and STM32F103 the highest step rate is with two "
#~ "simultaneous steppers stepping. On the SAM3X8E, SAM4S8C, SAM4E8E, LPC176x, "
#~ "and PRU the highest step rate is with three simultaneous steppers. On the "
#~ "SAMD51 and STM32F4 the highest step rate is with four simultaneous steppers."
#~ " (Further details on the benchmarks are available in the [Benchmarks "
#~ "document](Benchmarks.md).)"
#~ msgstr ""
#~ "AVR 플랫폼에서 가능한 step rate은 단 하나의 스태퍼 모터의 제어입니다. SAMD21 및 STM32F103에서는 동시에 두개의 "
#~ "스태퍼 모터를 제어할 수 있습니다. SAM3X8E, SAM4S8C, SAM4E8E, LPC176x 및 PRU에서는 동시에 3개가 "
#~ "가능합니다. SAMD51 및 STM32F4에서의 동시 사용 스태퍼 모터는 4개 입니다. (자세한 내용은 [Benchmarks "
#~ "document](Benchmarks.md).)에서 확인할 수 있습니다.)"

#~ msgid ""
#~ "Standard G-Code support. Common g-code commands that are produced by typical"
#~ " \"slicers\" are supported. One may continue to use Slic3r, Cura, etc. with "
#~ "Klipper."
#~ msgstr ""
#~ "표준 gcode 지원. 일반적인 \"슬라이서\" 에서 생성되는 gcode 명령이 지원됩니다. Slic3r, Cura 등을 Klipper와"
#~ " 함께 계속 사용할 수 있습니다."

#~ msgid ""
#~ "Support for cartesian, delta, corexy, corexz, rotary delta, polar, and cable"
#~ " winch style printers."
#~ msgstr ""
#~ "다양한 방식의 프린터지 지원. 직교, 델타, corexy, corexz, 회전 델타, 극성 및 케이블 윈치 스타일 프린터를 지원합니다."

#~ msgid ""
#~ "Support for common temperature sensors (eg, common thermistors, AD595, "
#~ "AD597, AD849x, PT100, PT1000, MAX6675, MAX31855, MAX31856, MAX31865, BME280,"
#~ " HTU21D, and LM75). Custom thermistors and custom analog temperature sensors"
#~ " can also be configured."
#~ msgstr ""
#~ "공통 온도 센서 지원 (예: 공통 서미스터, AD595, AD597, AD849x, PT100, PT1000, MAX6675, "
#~ "MAX31855, MAX31856, MAX31865, BME280, HTU21D 및 LM75). 맞춤형 서미스터 및 맞춤형 아날로그 온도"
#~ " 센서도 구성할 수 있습니다."

#~ msgid ""
#~ "Support for standard fans, nozzle fans, and temperature controlled fans. No "
#~ "need to keep fans running when the printer is idle."
#~ msgstr "표준 상시팬, 노즐팬 및 온도 제어팬을 지원합니다. 프린터가 유휴 상태일 때 팬을 계속 작동시킬 필요가 없습니다."
