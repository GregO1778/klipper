# brian park <gouache95@gmail.com>, 2021.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2021-08-25 12:33+0000\n"
"Last-Translator: brian park <gouache95@gmail.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/klipper/endstop_phase/ko/>\n"
"Language: ko\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.8.1-dev\n"

msgid ""
"This document describes Klipper's stepper phase adjusted endstop system. "
"This functionality can improve the accuracy of traditional endstop switches."
" It is most useful when using a Trinamic stepper motor driver that has run-"
"time configuration."
msgstr ""
"이 문서는 Klipper 의 스테퍼 위상 조정 엔드스톱 시스템에 대해 설명합니다. 이 기능은 기존 엔드스톱 스위치의 정확도를 향상시킬 수"
" 있습니다. 런타임 구성이 있는 Trinamic 스테퍼 모터 드라이버를 사용할 때 가장 유용합니다."

msgid ""
"A typical endstop switch has an accuracy of around 100 microns. (Each time "
"an axis is homed the switch may trigger slightly earlier or slightly later.)"
" Although this is a relatively small error, it can result in unwanted "
"artifacts. In particular, this positional deviation may be noticeable when "
"printing the first layer of an object. In contrast, typical stepper motors "
"can obtain significantly higher precision."
msgstr ""
"일반적인 엔드스톱 스위치의 정확도는 약 100미크론입니다. (축이 홈으로 이동할 때마다 스위치가 약간 더 일찍 또는 약간 늦게 트리거될 "
"수 있습니다.) 이것은 비교적 작은 오류이지만 원치 않는 결함이 발생할 수 있습니다. 특히, 이 위치 편차는 물체의 첫 번째 레이어를 "
"인쇄할 때 눈에 띌 수 있습니다. 대조적으로, 일반적인 스테퍼 모터는 훨씬 더 높은 정밀도를 얻을 수 있습니다."

msgid ""
"The stepper phase adjusted endstop mechanism can use the precision of the "
"stepper motors to improve the precision of the endstop switches. A stepper "
"motor moves by cycling through a series of phases until in completes four "
"\"full steps\". So, a stepper motor using 16 micro-steps would have 64 "
"phases and when moving in a positive direction it would cycle through "
"phases: 0, 1, 2, ... 61, 62, 63, 0, 1, 2, etc. Crucially, when the stepper "
"motor is at a particular position on a linear rail it should always be at "
"the same stepper phase. Thus, when a carriage triggers the endstop switch "
"the stepper controlling that carriage should always be at the same stepper "
"motor phase. Klipper's endstop phase system combines the stepper phase with "
"the endstop trigger to improve the accuracy of the endstop."
msgstr ""
"스테퍼 위상 조정 엔드 스톱 메커니즘은 스테퍼 모터의 정밀도를 사용하여 엔드 스톱 스위치의 정밀도를 향상시킬 수 있습니다. 스테퍼 모터는"
" 4 개의 \"전체 단계\" 가 완료될 때까지 일련의 단계를 순환하여 이동합니다. 따라서 16개의 마이크로 스텝을 사용하는 스테퍼 모터는"
" 64 개의 위상을 가지며 양의 방향으로 이동할 때 위상을 순환합니다: 0, 1, 2, ... 61, 62, 63, 0, 1, 2 등. "
"결정적으로 스테퍼 모터가 선형 레일의 특정 위치에 있을 때 항상 동일한 스테퍼 위상에 있어야 합니다. 따라서 캐리지가 엔드스톱 스위치를 "
"트리거할 때 해당 캐리지를 제어하는 스테퍼는 항상 동일한 스테퍼 모터 위상에 있어야 합니다. Klipper의 엔드스톱 위상 시스템은 "
"스테퍼 위상과 엔드스톱 트리거를 결합하여 엔드스톱의 정확도를 향상시킵니다."

msgid ""
"In order to use this functionality it is necessary to be able to identify "
"the phase of the stepper motor. If one is using Trinamic TMC2130, TMC2208, "
"TMC2224 or TMC2660 drivers in run-time configuration mode (ie, not stand-"
"alone mode) then Klipper can query the stepper phase from the driver. (It is"
" also possible to use this system on traditional stepper drivers if one can "
"reliably reset the stepper drivers - see below for details.)"
msgstr ""
"이 기능을 사용하려면 스테퍼 모터의 위상을 식별할 수 있어야 합니다. 런타임 구성 모드 (즉, 독립 실행형 모드가 아님) 에서 "
"Trinamic TMC2130, TMC2208, TMC2224 또는 TMC2660 드라이버를 사용하는 경우 Klipper 는 드라이버에서"
" 스테퍼 단계를 쿼리할 수 있습니다. (스테퍼 드라이버를 안정적으로 재설정할 수 있는 경우 기존 스테퍼 드라이버에서 이 시스템을 사용할 "
"수도 있습니다. 자세한 내용은 아래를 참조하십시오.)"

msgid "Calibrating endstop phases"
msgstr "엔드스톱 위상 보정"

msgid ""
"If using Trinamic stepper motor drivers with run-time configuration then one"
" can calibrate the endstop phases using the ENDSTOP_PHASE_CALIBRATE command."
" Start by adding the following to the config file:"
msgstr ""
"런타임 구성으로 Trinamic 스테퍼 모터 드라이버를 사용하는 경우 ENDSTOP_PHASE_CALIBRATE 명령을 사용하여 엔드스톱"
" 위상을 보정할 수 있습니다. 구성 파일에 다음을 추가하여 시작합니다:"

msgid ""
"Then RESTART the printer and run a `G28` command followed by an "
"`ENDSTOP_PHASE_CALIBRATE` command. Then move the toolhead to a new location "
"and run `G28` again. Try moving the toolhead to several different locations "
"and rerun `G28` from each position. Run at least five `G28` commands."
msgstr ""
"그런 다음 프린터를 다시 시작하고 `G28` 명령을 실행한 다음 `ENDSTOP_PHASE_CALIBRATE` 명령을 실행합니다. 그런 "
"다음 툴헤드를 새 위치로 이동하고 `G28`을 다시 실행합니다. 툴헤드를 여러 다른 위치로 이동하고 각 위치에서 `G28`을 다시 "
"실행하십시오. 'G28' 명령을 5개 이상 실행하세요."

msgid ""
"After performing the above, the `ENDSTOP_PHASE_CALIBRATE` command will often"
" report the same (or nearly the same) phase for the stepper. This phase can "
"be saved in the config file so that all future G28 commands use that phase. "
"(So, in future homing operations, Klipper will obtain the same position even"
" if the endstop triggers a little earlier or a little later.)"
msgstr ""
"위의 작업을 수행한 후 `ENDSTOP_PHASE_CALIBRATE` 명령은 종종 스테퍼에 대해 동일한 (또는 거의 동일한) 단계를 "
"보고합니다. 이 단계는 모든 향후 G28 명령이 해당 단계를 사용하도록 구성 파일에 저장할 수 있습니다. (따라서 향후 원점 복귀 "
"작업에서 Klipper는 엔드스톱이 조금 더 일찍 또는 조금 늦게 트리거되더라도 동일한 위치를 얻을 것입니다.)"

msgid ""
"To save the endstop phase for a particular stepper motor, run something like"
" the following:"
msgstr "특정 스테퍼 모터의 엔드스톱 위상을 저장하려면 다음과 같이 실행하십시오:"

msgid ""
"Run the above for all the steppers one wishes to save. Typically, one would "
"use this on stepper_z for cartesian and corexy printers, and for stepper_a, "
"stepper_b, and stepper_c on delta printers. Finally, run the following to "
"update the configuration file with the data:"
msgstr ""
"저장하려는 모든 스테퍼에 대해 위를 실행합니다. 일반적으로 직교 및 corexy 프린터의 경우 stepper_z 에서 사용하고 델타 "
"프린터의 경우 stepper_a, stepper_b 및 stepper_c에서 사용합니다. 마지막으로 다음을 실행하여 데이터로 구성 파일을"
" 업데이트합니다:"

msgid "Additional notes"
msgstr "추가 참고 사항"

msgid ""
"This feature is most useful on delta printers and on the Z endstop of "
"cartesian/corexy printers. It is possible to use this feature on the XY "
"endstops of cartesian printers, but that isn't particularly useful as a "
"minor error in X/Y endstop position is unlikely to impact print quality. It "
"is not valid to use this feature on the XY endstops of corexy printers (as "
"the XY position is not determined by a single stepper on corexy kinematics)."
" It is not valid to use this feature on a printer using a "
"\"probe:z_virtual_endstop\" Z endstop (as the stepper phase is only stable "
"if the endstop is at a static location on a rail)."
msgstr ""
"이 기능은 델타 프린터와 직교식/CoreXY 프린터의 Z 엔드스톱에서 가장 유용합니다. 직교 프린터의 XY 엔드스톱에서 이 기능을 사용할"
" 수 있지만 X/Y 엔드스톱 위치의 사소한 오류가 인쇄 품질에 영향을 미치지 않을 가능성이 높기 때문에 특히 유용하지 않습니다. "
"corexy 프린터의 XY 엔드스톱에서 이 기능을 사용하는 것은 유효하지 않습니다 (XY 위치는 corexy 운동학에서 단일 스테퍼에 "
"의해 결정되지 않기 때문에). \"probe:z_virtual_endstop\" Z 엔드스톱을 사용하는 프린터에서 이 기능을 사용하는 "
"것은 유효하지 않습니 다(스테퍼 단계는 엔드스톱이 레일의 정적 위치에 있는 경우에만 안정적이므로)."

msgid ""
"After calibrating the endstop phase, if the endstop is later moved or "
"adjusted then it will be necessary to recalibrate the endstop. Remove the "
"calibration data from the config file and rerun the steps above."
msgstr ""
"엔드스톱 단계를 보정한 후 엔드스톱이 나중에 이동되거나 조정되면 엔드스톱을 다시 보정해야 합니다. config 파일에서 보정 데이터를 "
"제거하고 위의 단계를 다시 실행합니다."

msgid ""
"In order to use this system the endstop must be accurate enough to identify "
"the stepper position within two \"full steps\". So, for example, if a "
"stepper is using 16 micro-steps with a step distance of 0.005mm then the "
"endstop must have an accuracy of at least 0.160mm. If one gets \"Endstop "
"stepper_z incorrect phase\" type error messages than in may be due to an "
"endstop that is not sufficiently accurate. If recalibration does not help "
"then disable endstop phase adjustments by removing them from the config "
"file."
msgstr ""
"이 시스템을 사용하려면 엔드스톱이 두 개의 \"full steps\" 내에서 스테퍼 위치를 식별할 수 있을 만큼 정확해야 합니다. 예를 "
"들어, 스테퍼가 0.005mm의 단계 거리로 16개의 마이크로 단계를 사용하는 경우 엔드스톱의 정확도는 0.160mm 이상이어야 합니다."
" \"Endstop stepper_z 잘못된 단계\" 유형 오류 메시지가 표시되면 충분히 정확하지 않은 endstop 때문일 수 "
"있습니다. 재교정이 도움이 되지 않으면 구성 파일에서 엔드스톱 위상 조정을 제거하여 비활성화하십시오."

msgid ""
"If one is using a traditional stepper controlled Z axis (as on a cartesian "
"or corexy printer) along with traditional bed leveling screws then it is "
"also possible to use this system to arrange for each print layer to be "
"performed on a \"full step\" boundary. To enable this feature be sure the "
"G-Code slicer is configured with a layer height that is a multiple of a "
"\"full step\", manually enable the endstop_align_zero option in the "
"endstop_phase config section (see [config "
"reference](Config_Reference.md#endstop_phase) for further details), and then"
" re-level the bed screws."
msgstr ""
"전통적인 베드 레벨링 나사와 함께 전통적인 스테퍼 제어 Z 축 (직교 또는 CoreXY 프린터에서와 같이) 을 사용하는 경우 이 시스템을"
" 사용하여 각 인쇄 레이어가 \"full step\" 경계에서 수행되도록 배열할 수도 있습니다. 이 기능을 활성화하려면 G-Code "
"슬라이서가 \"full step\"의 배수인 레이어 높이로 구성되었는지 확인하고 endstop_phase 구성 섹션에서 "
"endstop_align_zero 옵션을 수동으로 활성화합니다 [config "
"reference](Config_Reference.md#endstop_phase ) 를 참조하여 베드 나사의 수평을 다시 맞추십시오."

msgid ""
"It is possible to use this system with traditional (non-Trinamic) stepper "
"motor drivers. However, doing this requires making sure that the stepper "
"motor drivers are reset every time the micro-controller is reset. (If the "
"two are always reset together then Klipper can determine the stepper phase "
"by tracking the total number of steps it has commanded the stepper to move.)"
" Currently, the only way to do this reliably is if both the micro-controller"
" and stepper motor drivers are powered solely from USB and that USB power is"
" provided from a host running on a Raspberry Pi. In this situation one can "
"specify an mcu config with \"restart_method: rpi_usb\" - that option will "
"arrange for the micro-controller to always be reset via a USB power reset, "
"which would arrange for both the micro-controller and stepper motor drivers "
"to be reset together. If using this mechanism, one would then need to "
"manually configure the \"trigger_phase\" config sections (see [config "
"reference](Config_Reference.md#endstop_phase) for the details)."
msgstr ""
"이 시스템을 기존의(비 Trinamic) 스테퍼 모터 드라이버와 함께 사용할 수 있습니다. 그러나 이렇게 하려면 마이크로 컨트롤러가 "
"재설정될 때마다 스테퍼 모터 드라이버가 재설정되어야 합니다. (두 가지가 항상 함께 재설정되면 Klipper는 스테퍼에 이동하도록 명령한"
" 총 단계 수를 추적하여 스테퍼 단계를 결정할 수 있습니다.) 현재 이 작업을 안정적으로 수행하는 유일한 방법은 마이크로 컨트롤러와 "
"스테퍼 모터 드라이버가 모두 USB에서만 전원이 공급되고 USB 전원이 Raspberry Pi에서 실행되는 호스트에서 제공되는 "
"경우입니다. 이 상황에서 \"restart_method: rpi_usb\" 로 mcu 구성을 지정할 수 있습니다. 이 옵션은 마이크로 "
"컨트롤러가 USB 전원 재설정을 통해 항상 재설정되도록 정렬합니다. 그러면 마이크로 컨트롤러와 스테퍼 모터 드라이버가 모두 함께 "
"재설정합니다. 이 메커니즘을 사용하는 경우 \"trigger_phase\" 구성 섹션을 수동으로 구성해야 합니다 (자세한 내용은 "
"[config reference](Config_Reference.md#endstop_phase) 참조)."

msgid "[endstop_phase]\n"
msgstr "[endstop_phase]\n"

msgid "ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_z\n"
msgstr "ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_z\n"

msgid "SAVE_CONFIG\n"
msgstr "SAVE_CONFIG\n"

#: docs/Endstop_Phase.md:block 1 (header)
msgid "Endstop phase"
msgstr "Endstop phase"
