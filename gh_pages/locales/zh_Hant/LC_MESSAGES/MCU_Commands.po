# Fred Chan <fred2088@gmail.com>, 2022.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2022-02-23 12:56+0000\n"
"Last-Translator: Fred Chan <fred2088@gmail.com>\n"
"Language-Team: Chinese (Traditional) <https://hosted.weblate.org/projects/klipper/mcu_commands/zh_Hant/>\n"
"Language: zh_Hant\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.11-dev\n"

msgid ""
"This document provides information on the low-level micro-controller "
"commands that are sent from the Klipper \"host\" software and processed by "
"the Klipper micro-controller software. This document is not an authoritative"
" reference for these commands, nor is it an exclusive list of all available "
"commands."
msgstr "該文件介紹了Klipper上位機軟體發送到微控制器的，並由微處理器負責執行的底層命令。該文件不是這些命令的權威文件，也並未包含所有命令。"

msgid ""
"This document may be useful for developers interested in understanding the "
"low-level micro-controller commands."
msgstr "若想深入瞭解底層微處理器命令，該文件是不錯的入門材料。"

msgid ""
"See the [protocol](Protocol.md) document for more information on the format "
"of commands and their transmission. The commands here are described using "
"their \"printf\" style syntax - for those unfamiliar with that format, just "
"note that where a '%...' sequence is seen it should be replaced with an "
"actual integer. For example, a description with \"count=%c\" could be "
"replaced with the text \"count=10\". Note that parameters that are "
"considered \"enumerations\" (see the above protocol document) take a string "
"value which is automatically converted to an integer value for the micro-"
"controller. This is common with parameters named \"pin\" (or that have a "
"suffix of \"_pin\")."
msgstr ""
"關於命令的格式和傳輸的更多資訊，見[protocol](Protocol.md)檔案。這裡的命令是使用其 \"printf \"風格的語法描述的--"
"對於那些不熟悉這種格式的人來說，只需注意在看到'%...'序列時，應該用一個實際的整數來代替。例如，\"count=%c \"的描述可以被替換為 "
"\"count=10\"。請注意，那些被認為是 \"enumerations "
"\"的參數（見上述協議檔案）採取的是一個字串值，對於微控制器來說，它被自動轉換為一個整數值。這在名為 "
"\"pin\"（或後綴為\"_pin\"）的參數中很常見。"

msgid "Startup Commands"
msgstr "啟動命令"

msgid ""
"It may be necessary to take certain one-time actions to configure the micro-"
"controller and its peripherals. This section lists common commands available"
" for that purpose. Unlike most micro-controller commands, these commands run"
" as soon as they are received and they do not require any particular setup."
msgstr ""
"可能需要採取某些一次性的命令來配置微控制器及其片上外備。本節列出了可用於該目的的常用命令。與大多數微控制器的命令不同，這些命令在收到后立即執行，它們不需要任何特殊的設定。"

msgid "Common startup commands:"
msgstr "常見的啟動命令："

msgid ""
"`set_digital_out pin=%u value=%c` : This command immediately configures the "
"given pin as a digital out GPIO and it sets it to either a low level "
"(value=0) or a high level (value=1). This command may be useful for "
"configuring the initial value of LEDs and for configuring the initial value "
"of stepper driver micro-stepping pins."
msgstr ""
"`set_digital_out pin=%u "
"value=%c`：該命令立即將指定的引腳配置為數字輸出GPIO，並將其設定為低電平（value=0）或高電平（value=1）。這條命令對於配置LED的初始值和配置步進驅動器微步進引腳的初始值很有用。"

msgid ""
"`set_pwm_out pin=%u cycle_ticks=%u value=%hu` : This command will "
"immediately configure the given pin to use hardware based pulse-width-"
"modulation (PWM) with the given number of cycle_ticks. The \"cycle_ticks\" "
"is the number of MCU clock ticks each power on and power off cycle should "
"last. A cycle_ticks value of 1 can be used to request the fastest possible "
"cycle time. The \"value\" parameter is between 0 and 255 with 0 indicating a"
" full off state and 255 indicating a full on state. This command may be "
"useful for enabling CPU and nozzle cooling fans."
msgstr ""
"`set_pwm_out pin=%u cycle_ticks=%u "
"value=%hu`：該命令將立即配置指定的引腳，使其使用硬體的脈寬調製（PWM）和給定的cycle_ticks。「cycle_ticks」是指每個通電和斷電週期應該持續的MCU時鐘數。cycle_ticks的值為1表示使用最短的週期時間。「value」參數在0-255之間，0表示完全關閉狀態，255表示完全開啟狀態。該命令對啟用CPU和噴嘴冷卻風扇很有用。"

msgid "Low-level micro-controller configuration"
msgstr "底層微控制器配置"

msgid ""
"Most commands in the micro-controller require an initial setup before they "
"can be successfully invoked. This section provides an overview of the "
"configuration process. This section and the following sections are likely "
"only of interest to developers interested in the internal details of "
"Klipper."
msgstr ""
"微控制器中的大多數命令在成功呼叫之前需要進行初始設定。本節提供了一個配置過程的概述。本節和下面的章節適用於對Klipper的內部細節感興趣的開發者。"

msgid ""
"When the host first connects to the micro-controller it always starts by "
"obtaining a data dictionary (see [protocol](Protocol.md) for more "
"information). After the data dictionary is obtained the host will check if "
"the micro-controller is in a \"configured\" state and configure it if not. "
"Configuration involves the following phases:"
msgstr ""
"當主機第一次連線到微控制器時，它總是從獲得一個數據字典開始（更多資訊見[protocol](Protocol.md)）。獲得數據字典后，主機將檢查微控制器是否處於"
" \"已配置 \"狀態，如果不是，就進行配置。配置包括以下幾個階段："

msgid ""
"`get_config` : The host starts by checking if the micro-controller is "
"already configured. The micro-controller responds to this command with a "
"\"config\" response message. The micro-controller software always starts in "
"an unconfigured state at power-on. It remains in this state until the host "
"completes the configuration processes (by issuing a finalize_config "
"command). If the micro-controller is already configured from a previous "
"session (and is configured with the desired settings) then no further action"
" is needed by the host and the configuration process ends successfully."
msgstr ""
"`get_config`：主機首先檢查微控制器是否已經被配置。微控制器用一個 \"config "
"\"的響應資訊來回應這個命令。微控制器軟體在上電時總是以未配置的狀態啟動。在主機完成配置過程之前（通過發出finalize_config命令），它一直處於這種狀態。如果微控制器已經在前一個會話中進行了配置（並且配置了所需的設定），那麼主機就不需要進一步的操作，配置過程成功結束。"

msgid ""
"`allocate_oids count=%c` : This command is issued to inform the micro-"
"controller of the maximum number of object-ids (oid) that the host requires."
" It is only valid to issue this command once. An oid is an integer "
"identifier allocated to each stepper, each endstop, and each schedulable "
"gpio pin. The host determines in advance the number of oids it will require "
"to operate the hardware and passes this to the micro-controller so that it "
"may allocate sufficient memory to store a mapping from oid to internal "
"object."
msgstr ""
"`allocate_oids "
"count=%c`：這條命令是用來通知微控制器主機所需的對象標識（oid）的最大數量。這條命令只有效一次。oid是分配給每個步進電機、每個限位開關和每個可排程的gpio引腳的一個整數標識。主機事先確定操作硬體所需的oid數量，並將其傳遞給微控制器，以便它可以分配足夠的記憶體來儲存從oid到內部對象的對映。"

msgid ""
"`config_XXX oid=%c ...` : By convention any command starting with the "
"\"config_\" prefix creates a new micro-controller object and assigns the "
"given oid to it. For example, the config_digital_out command will configure "
"the specified pin as a digital output GPIO and create an internal object "
"that the host can use to schedule changes to the given GPIO. The oid "
"parameter passed into the config command is selected by the host and must be"
" between zero and the maximum count supplied in the allocate_oids command. "
"The config commands may only be run when the micro-controller is not in a "
"configured state (ie, prior to the host sending finalize_config) and after "
"the allocate_oids command has been sent."
msgstr ""
"`config_XXX oid=%c ...`：按照慣例，任何以 "
"\"config_\"開頭的命令都會建立一個新的微控制器對象，並將給定的oid賦予它。例如，config_digital_out命令將把指定的引腳配置為數字輸出GPIO，並建立一個內部對象，主機可以用它來安排改變指定的GPIO的輸出。傳入config命令的oid參數由主機選擇，必須介於0和allocate_oids命令中提供的最大計數之間。config命令只能在微控制器不處於已配置狀態時（即在主機發送finalize_config之前）和allocate_oids命令被髮送之後執行。"

msgid ""
"`finalize_config crc=%u` : The finalize_config command transitions the "
"micro-controller from an unconfigured state to a configured state. The crc "
"parameter passed to the micro-controller is stored and provided back to the "
"host in \"config\" response messages. By convention, the host takes a 32bit "
"CRC of the configuration it will request and at the start of subsequent "
"communication sessions it checks that the CRC stored in the micro-controller"
" exactly matches its desired CRC. If the CRC does not match then the host "
"knows the micro-controller has not been configured in the state desired by "
"the host."
msgstr ""
"`finalize_config "
"crc=%u`：finalize_config命令將微控制器從未配置狀態轉換為已配置狀態。傳遞給微控制器的crc參數被儲存起來，並在 \"config "
"\"響應資訊中反饋給主機。按照慣例，主機對它所要求的配置採取32位的CRC，並在隨後的通訊會話開始時，檢查儲存在微控制器中的CRC是否與它所希望的CRC正確匹配。如果CRC不匹配，那麼主機就知道微控制器還沒有被配置到主機所希望的狀態。"

msgid "Common micro-controller objects"
msgstr "常見的微控制器對像"

msgid "This section lists some commonly used config commands."
msgstr "本節列出了一些常用的配置命令。"

msgid ""
"`config_digital_out oid=%c pin=%u value=%c default_value=%c max_duration=%u`"
" : This command creates an internal micro-controller object for the given "
"GPIO 'pin'. The pin will be configured in digital output mode and set to an "
"initial value as specified by 'value' (0 for low, 1 for high). Creating a "
"digital_out object allows the host to schedule GPIO updates for the given "
"pin at specified times (see the queue_digital_out command described below). "
"Should the micro-controller software go into shutdown mode then all "
"configured digital_out objects will be set to 'default_value'. The "
"'max_duration' parameter is used to implement a safety check - if it is non-"
"zero then it is the maximum number of clock ticks that the host may set the "
"given GPIO to a non-default value without further updates. For example, if "
"the default_value is zero and the max_duration is 16000 then if the host "
"sets the gpio to a value of one then it must schedule another update to the "
"gpio pin (to either zero or one) within 16000 clock ticks. This safety "
"feature can be used with heater pins to ensure the host does not enable the "
"heater and then go off-line."
msgstr ""
"`config_digital_out oid=%c pin=%u value=%c default_value=%c "
"max_duration=%u`：該命令為給定的GPIO'pin'建立一個內部微控制器對象。該引腳將被配置為數字輸出模式，並被設定為'value'指定的初始值（0為低，1為高）。建立一個digital_out對像允許主機在指定的時間內對指定引腳重新整理GPIO輸出狀態（見下面描述的queue_digital_out命令）。如果微控制器軟體進入關機模式，那麼所有配置的digital_out對像將被設定為'default_value'。max_duration"
" \"參數用於實現安全檢查--"
"如果它是非零，那麼它代表主機可以將指定的GPIO設為非預設值而不需要重新整理的最大時鐘數。例如，如果default_value是0，max_duration是16000，那麼如果主機將gpio設定為1，它必須在16000個時鐘刻度內重新整理gpio引腳的輸出（為0或1）。這個安全功能可用於加熱器引腳，以確保主機不會啟用加熱器后離線。"

msgid ""
"`config_pwm_out oid=%c pin=%u cycle_ticks=%u value=%hu default_value=%hu "
"max_duration=%u` : This command creates an internal object for hardware "
"based PWM pins that the host may schedule updates for. Its usage is "
"analogous to config_digital_out - see the description of the 'set_pwm_out' "
"and 'config_digital_out' commands for parameter description."
msgstr ""
"`config_pwm_out oid=%c pin=%u cycle_ticks=%u value=%hu default_value=%hu "
"max_duration=%u`：該命令為基於硬體的PWM引腳建立一個內部對象，主機可以定期重新整理。它的用法與config_digital_out類似"
"--參數說明見'set_pwm_out'和'config_digital_out'命令的描述。"

msgid ""
"`config_analog_in oid=%c pin=%u` : This command is used to configure a pin "
"in analog input sampling mode. Once configured, the pin can be sampled at "
"regular interval using the query_analog_in command (see below)."
msgstr ""
"`config_analog_in oid=%c "
"pin=%u`：該命令用於將一個引腳配置為模擬輸入採樣模式。一旦配置完成，就可以使用query_analog_in命令（見下文）以固定的時間間隔對該引腳進行採樣。"

msgid ""
"`config_endstop oid=%c pin=%c pull_up=%c stepper_count=%c` : This command "
"creates an internal \"endstop\" object. It is used to specify the endstop "
"pins and to enable \"homing\" operations (see the endstop_home command "
"below). The command will configure the specified pin in digital input mode. "
"The 'pull_up' parameter determines whether hardware provided pullup "
"resistors for the pin (if available) will be enabled. The 'stepper_count' "
"parameter specifies the maximum number of steppers that this endstop may "
"need to halt during a homing operation (see endstop_home below)."
msgstr ""
"`config_endstop oid=%c pin=%c pull_up=%c stepper_count=%c` : 該命令建立一個內部的 "
"\"endstop\"對象。它用於指定限位開關的引腳，並啟用 \"homing "
"\"操作（見下面的endstop_home命令）。該命令將把指定的引腳配置為數字輸入模式。『pull_up』參數決定是否啟用硬體為引腳提供的上拉電阻（如果有的話）。『stepper_count』參數規定了在歸零操作中，該限位開關觸發器可能需要的最大步進數（見下文endstop_home）。"

msgid ""
"`config_spi oid=%c bus=%u pin=%u mode=%u rate=%u shutdown_msg=%*s` : This "
"command creates an internal SPI object. It is used with spi_transfer and "
"spi_send commands (see below). The \"bus\" identifies the SPI bus to use (if"
" the micro-controller has more than one SPI bus available). The \"pin\" "
"specifies the chip select (CS) pin for the device. The \"mode\" is the SPI "
"mode (should be between 0 and 3). The \"rate\" parameter specifies the SPI "
"bus rate (in cycles per second). Finally, the \"shutdown_msg\" is an SPI "
"command to send to the given device should the micro-controller go into a "
"shutdown state."
msgstr ""
"`config_spi oid=%c bus=%u pin=%u mode=%u rate=%u "
"shutdown_msg=%*s`：該命令建立了一個內部SPI對象。它與spi_transfer和spi_send命令一起使用（見下文）。\"bus\"標識了要使用的SPI匯流排（如果微控制器有一個以上的SPI匯流排可用）。\"pin\"指定了裝置的片選（CS）引腳。\"mode\"指定SPI模式（應該在0到3之間）。\"rate"
" \"參數指定了SPI匯流排的速率（以每秒週期為單位）。最後，\"shutdown_msg \"是在微控制器進入關機狀態時向給定裝置發送的SPI命令。"

msgid ""
"`config_spi_without_cs oid=%c bus=%u mode=%u rate=%u shutdown_msg=%*s` : "
"This command is similar to config_spi, but without a CS pin definition. It "
"is useful for SPI devices that do not have a chip select line."
msgstr ""
"`config_spi_without_cs oid=%c bus=%u mode=%u rate=%u shutdown_msg=%*s` : "
"這個命令類似於config_spi，但是沒有CS引腳的定義。它對沒有晶片選擇線的SPI裝置很有用。"

msgid "Common commands"
msgstr "常用命令"

msgid ""
"This section lists some commonly used run-time commands. It is likely only "
"of interest to developers looking to gain insight into Klipper."
msgstr "本節列出了一些常用的執行時命令。對希望深入瞭解Klipper的開發者可能會感興趣。"

msgid ""
"`set_digital_out_pwm_cycle oid=%c cycle_ticks=%u` : This command configures "
"a digital output pin (as created by config_digital_out) to use \"software "
"PWM\". The 'cycle_ticks' is the number of clock ticks for the PWM cycle. "
"Because the output switching is implemented in the micro-controller "
"software, it is recommended that 'cycle_ticks' correspond to a time of 10ms "
"or greater."
msgstr ""
"`set_digital_out_pwm_cycle oid=%c "
"cycle_ticks=%u`：該命令將數字輸出引腳（由config_digital_out建立）配置為使用 "
"\"軟體PWM\"。'cycle_ticks' "
"是PWM週期的時鐘數。因為輸出切換是在微控制器軟體中實現的，建議把'cycle_ticks'對應的時間設為10ms或更大。"

msgid ""
"`queue_digital_out oid=%c clock=%u on_ticks=%u` : This command will schedule"
" a change to a digital output GPIO pin at the given clock time. To use this "
"command a 'config_digital_out' command with the same 'oid' parameter must "
"have been issued during micro-controller configuration. If "
"'set_digital_out_pwm_cycle' has been called then 'on_ticks' is the on "
"duration (in clock ticks) for the pwm cycle. Otherwise, 'on_ticks' should be"
" either 0 (for low voltage) or 1 (for high voltage)."
msgstr ""
"`queue_digital_out oid=%c clock=%u on_ticks=%u` : "
"這個命令將安排在設定的時鐘時間內改變數字輸出GPIO引腳。要使用這條命令，必須在微控制器配置過程中發出具有相同『oid』參數的'config_digital_out'命令。如果'set_digital_out_pwm_cycle'已經被呼叫，那麼'on_ticks'就是pwm週期的開啟時間（以時鐘數為單位）。否則，'on_ticks'應該是0（低電壓）或1（高電壓）。"

msgid ""
"`queue_pwm_out oid=%c clock=%u value=%hu` : Schedules a change to a hardware"
" PWM output pin. See the 'queue_digital_out' and 'config_pwm_out' commands "
"for more info."
msgstr ""
"`queue_pwm_out oid=%c clock=%u value=%hu` ：安排改變一個硬體PWM輸出引腳。更多資訊請參考 "
"'queue_digital_out' 和 'config_pwm_out' 命令。"

msgid ""
"`query_analog_in oid=%c clock=%u sample_ticks=%u sample_count=%c "
"rest_ticks=%u min_value=%hu max_value=%hu` : This command sets up a "
"recurring schedule of analog input samples. To use this command a "
"'config_analog_in' command with the same 'oid' parameter must have been "
"issued during micro-controller configuration. The samples will start as of "
"'clock' time, it will report on the obtained value every 'rest_ticks' clock "
"ticks, it will over-sample 'sample_count' number of times, and it will pause"
" 'sample_ticks' number of clock ticks between over-sample samples. The "
"'min_value' and 'max_value' parameters implement a safety feature - the "
"micro-controller software will verify the sampled value (after any "
"oversampling) is always between the supplied range. This is intended for use"
" with pins attached to thermistors controlling heaters - it can be used to "
"check that a heater is within a temperature range."
msgstr ""
"`query_analog_in oid=%c clock=%u sample_ticks=%u sample_count=%c "
"rest_ticks=%u min_value=%hu "
"max_value=%hu`：此命令設定了一個對模擬輸入的循環採樣。要使用這條命令，必須在微控制器配置時發出具有相同'oid'參數的 "
"'config_analog_in "
"'命令。採樣將從'clock'時間開始，它將每隔'rest_ticks'時鐘數報告獲得的值，'sample_count'是過量採樣次數，'sample_ticks'是在過量採樣之間暫停的時鐘數。\"min_value"
" \"和 \"max_value \"參數實現了安全功能--"
"微控制器軟體將驗證採樣值（在每次過採樣之後）總是在安全範圍內。這是為連線到控制加熱器的熱敏電阻的引腳而設計的--"
"它可以用來檢查加熱器是否在一個溫度範圍內。"

msgid ""
"`get_clock` : This command causes the micro-controller to generate a "
"\"clock\" response message. The host sends this command once a second to "
"obtain the value of the micro-controller clock and to estimate the drift "
"between host and micro-controller clocks. It enables the host to accurately "
"estimate the micro-controller clock."
msgstr ""
"`get_clock`：該命令使微控制器產生一個 "
"\"clock\"響應訊息。主機每秒發送一次這個命令，以獲得微控制器的時鐘值，並估計主機和微控制器時鐘之間的漂移。它使主機能夠準確估計微控制器的時鐘。"

msgid "Stepper commands"
msgstr "步進器命令"

msgid ""
"`queue_step oid=%c interval=%u count=%hu add=%hi` : This command schedules "
"'count' number of steps for the given stepper, with 'interval' number of "
"clock ticks between each step. The first step will be 'interval' number of "
"clock ticks since the last scheduled step for the given stepper. If 'add' is"
" non-zero then the interval will be adjusted by 'add' amount after each "
"step. This command appends the given interval/count/add sequence to a per-"
"stepper queue. There may be hundreds of these sequences queued during normal"
" operation. New sequence are appended to the end of the queue and as each "
"sequence completes its 'count' number of steps it is popped from the front "
"of the queue. This system allows the micro-controller to queue potentially "
"hundreds of thousands of steps - all with reliable and predictable schedule "
"times."
msgstr ""
"`queue_step oid=%c interval=%u count=%hu "
"add=%hi`：該命令安排指定的步進電機輸出'count'個步數，'interval'是每步之間的時鐘數間隔。命令中的第一步與上一個步進輸出命令最後一步的時間間隔為'interval'個時鐘數。如果'add'不為零，那麼每步之後的間隔將以'add'的增量調整。該命令將給定的間隔/計數/增量序列附加到每個步進佇列中。在正常操作中，可能有數百個這樣的序列排隊。新的序列被新增到佇列的末尾，當每個序列完成了它的"
" 'count'步數后它就從佇列的前面彈出去。這個系統允許微控制器將幾十萬步排入佇列--所有這些都有可靠且可預測的排程時序。"

msgid ""
"`set_next_step_dir oid=%c dir=%c` : This command specifies the value of the "
"dir_pin that the next queue_step command will use."
msgstr "`set_next_step_dir oid=%c dir=%c`：該命令指定了下一個queue_step命令將使用的dir_pin的值。"

msgid ""
"`reset_step_clock oid=%c clock=%u` : Normally, step timing is relative to "
"the last step for a given stepper. This command resets the clock so that the"
" next step is relative to the supplied 'clock' time. The host usually only "
"sends this command at the start of a print."
msgstr ""
"`reset_step_clock oid=%c "
"clock=%u`：通常情況下步進時序是相對於給定步進的上一步。這條命令重置了時鐘，使下一步是相對於提供的 'clock' "
"時間。通常主機只在列印開始時發送此命令。"

msgid ""
"`stepper_get_position oid=%c` : This command causes the micro-controller to "
"generate a \"stepper_position\" response message with the stepper's current "
"position. The position is the total number of steps generated with dir=1 "
"minus the total number of steps generated with dir=0."
msgstr ""
"`stepper_get_position oid=%c`：該命令使微控制器產生一個 \"stepper_position "
"\"響應訊息，其中包含步進器的當前位置。該位置是dir=1時產生的總步數減去dir=0時的總步數。"

msgid ""
"`endstop_home oid=%c clock=%u sample_ticks=%u sample_count=%c rest_ticks=%u "
"pin_value=%c` : This command is used during stepper \"homing\" operations. "
"To use this command a 'config_endstop' command with the same 'oid' parameter"
" must have been issued during micro-controller configuration. When this "
"command is invoked, the micro-controller will sample the endstop pin every "
"'rest_ticks' clock ticks and check if it has a value equal to 'pin_value'. "
"If the value matches (and it continues to match for 'sample_count' "
"additional samples spread 'sample_ticks' apart) then the movement queue for "
"the associated stepper will be cleared and the stepper will come to an "
"immediate halt. The host uses this command to implement homing - the host "
"instructs the endstop to sample for the endstop trigger and then it issues a"
" series of queue_step commands to move a stepper towards the endstop. Once "
"the stepper hits the endstop, the trigger will be detected, the movement "
"halted, and the host notified."
msgstr ""
"`endstop_home oid=%c clock=%u sample_ticks=%u sample_count=%c rest_ticks=%u "
"pin_value=%c`：該命令用於步進電機 \"homing\"操作。要使用這條命令，必須在微控制器配置過程中發出具有相同 'oid '參數的 "
"'config_endstop "
"'命令。當這個命令被呼叫時，微控制器將在每一個'rest_ticks'時鐘刻度上對限位開關引腳進行採樣，並檢查它的值是否等於'pin_value'。如果開關被觸發（並且以間隔'sample_ticks'為週期，額外持續'sample_count'次被觸發），那麼相關步進的運動佇列將被清除，步進將立即停止。主機使用該命令實現歸位–主機指示限位開關對限位開關的觸發進行採樣，然後發出一系列queue_step命令，使步進向限位移動。一旦步進電機撞到限位開關，檢測到觸發，運動就會停止並通知主機。"

msgid "Move queue"
msgstr "運動佇列"

msgid ""
"Each queue_step command utilizes an entry in the micro-controller \"move "
"queue\". This queue is allocated when it receives the \"finalize_config\" "
"command, and it reports the number of available queue entries in \"config\" "
"response messages."
msgstr ""
"每個queue_step命令都利用了微控制器 \"move queue \"中的一個條目。這個佇列是在它收到 \"finalize_config "
"\"命令時分配的，它在 \"config \"響應資訊中報告可用佇列條目的數量。"

msgid ""
"It is the responsibility of the host to ensure that there is available space"
" in the queue before sending a queue_step command. The host does this by "
"calculating when each queue_step command completes and scheduling new "
"queue_step commands accordingly."
msgstr ""
"在發送queue_step命令之前，主機有責任確保佇列中有可用空間。這需要主機通過計算每個queue_step命令完成的時間並相應地安排新的queue_step命令來實現。"

msgid "SPI Commands"
msgstr "SPI 命令"

msgid ""
"`spi_transfer oid=%c data=%*s` : This command causes the micro-controller to"
" send 'data' to the spi device specified by 'oid' and it generates a "
"\"spi_transfer_response\" response message with the data returned during the"
" transmission."
msgstr ""
"`spi_transfer oid=%c data=%*s`：這條命令使微控制器向 'oid '指定的spi裝置發送 'data' ，並產生一個 "
"\"spi_transfer_response \"的響應訊息，其中包括傳輸期間返回的數據。"

msgid ""
"`spi_send oid=%c data=%*s` : This command is similar to \"spi_transfer\", "
"but it does not generate a \"spi_transfer_response\" message."
msgstr ""
"`spi_send oid=%c data=%*s`：這個命令與 \"spi_transfer \"類似，但它不產生 "
"\"spi_transfer_response \"訊息。"

#: docs/MCU_Commands.md:block 1 (header)
msgid "MCU commands"
msgstr "MCU命令"

#: docs/MCU_Commands.md:block 15 (unordered list)
msgid ""
"`config_stepper oid=%c step_pin=%c dir_pin=%c invert_step=%c "
"step_pulse_ticks=%u` : This command creates an internal stepper object. The "
"'step_pin' and 'dir_pin' parameters specify the step and direction pins "
"respectively; this command will configure them in digital output mode. The "
"'invert_step' parameter specifies whether a step occurs on a rising edge "
"(invert_step=0) or falling edge (invert_step=1). The 'step_pulse_ticks' "
"parameter specifies the minimum duration of the step pulse. If the mcu "
"exports the constant 'STEPPER_BOTH_EDGE=1' then setting step_pulse_ticks=0 "
"and invert_step=-1 will setup for stepping on both the rising and falling "
"edges of the step pin."
msgstr ""
"`config_stepper oid=%c step_pin=%c dir_pin=%c invert_step=%c "
"step_pulse_ticks=%u`：該命令建立一個內部步進器對象。'step_pin'和'dir_pin'參數分別指定步進和方向引腳；該命令將把它們配置為數字輸出模式。'invert_step'參數指定步進是發生在上升沿（invert_step=0）還是下降沿（invert_step=1）。'step_pulse_ticks'參數指定了步進脈衝的最小持續時間。如果MCU輸出常數"
" "
"\"STEPPER_BOTH_EDGE=1\"，那麼設定step_pulse_ticks=0和invert_step=-1將設定在步進引腳的上升沿和下降沿都進行步進輸出。"

#~ msgid ""
#~ "`config_stepper oid=%c step_pin=%c dir_pin=%c invert_step=%c` : This command"
#~ " creates an internal stepper object. The 'step_pin' and 'dir_pin' parameters"
#~ " specify the step and direction pins respectively; this command will "
#~ "configure them in digital output mode. The 'invert_step' parameter specifies"
#~ " whether a step occurs on a rising edge (invert_step=0) or falling edge "
#~ "(invert_step=1)."
#~ msgstr ""
