# Yifei Ding <dingyifeiair@gmail.com>, 2021, 2022.
# Neko.vecter <Vecterfang@icloud.com>, 2022.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2022-09-15 08:23+0000\n"
"Last-Translator: Yifei Ding <dingyifeiair@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/klipper/command_templates/zh_Hans/>\n"
"Language: zh_Hans\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.14.1-dev\n"

msgid ""
"This document provides information on implementing G-Code command sequences "
"in gcode_macro (and similar) config sections."
msgstr "本文档描述了 gcode_macro（和其他类似）配置分段中实现 G-Code 命令序列的方法。"

msgid "G-Code Macro Naming"
msgstr "G 代码宏命名"

msgid ""
"Case is not important for the G-Code macro name - MY_MACRO and my_macro will"
" evaluate the same and may be called in either upper or lower case. If any "
"numbers are used in the macro name then they must all be at the end of the "
"name (eg, TEST_MACRO25 is valid, but MACRO25_TEST3 is not)."
msgstr ""
"G-Code 宏的名称大小写并不重要。比如，MY_MACRO 和 my_macro "
"是等效的，可以用大写或小写来调用。如果在宏的名称中使用任何数字，那么它们必须都在名称的末尾（例如，TEST_MACRO25是合法的，但MACRO25_TEST3是不合法的）。"

msgid "Formatting of G-Code in the config"
msgstr "配置中 G 代码的格式"

msgid ""
"Indentation is important when defining a macro in the config file. To "
"specify a multi-line G-Code sequence it is important for each line to have "
"proper indentation. For example:"
msgstr "在配置文件中定义一个宏时需要注意缩进。在定义多行的G代码序列时每行都要有适当的缩进。例如："

msgid ""
"Note how the `gcode:` config option always starts at the beginning of the "
"line and subsequent lines in the G-Code macro never start at the beginning."
msgstr "请注意，`gcode:` 配置选项总是从行首开始，而 G-Code 宏中的后续行从不从行首开始。"

msgid "Add a description to your macro"
msgstr "向宏添加描述"

msgid ""
"To help identify the functionality a short description can be added. Add "
"`description:` with a short text to describe the functionality. Default is "
"\"G-Code macro\" if not specified. For example:"
msgstr "可以通过添加 `description:` 和简短的描述来帮助理解该功能。如果没有指定，默认为\"G-Code macro\"。例如："

msgid "Save/Restore state for G-Code moves"
msgstr "保存/恢复 G-Code 移动的状态"

msgid ""
"Unfortunately, the G-Code command language can be challenging to use. The "
"standard mechanism to move the toolhead is via the `G1` command (the `G0` "
"command is an alias for `G1` and it can be used interchangeably with it). "
"However, this command relies on the \"G-Code parsing state\" setup by `M82`,"
" `M83`, `G90`, `G91`, `G92`, and previous `G1` commands. When creating a "
"G-Code macro it is a good idea to always explicitly set the G-Code parsing "
"state prior to issuing a `G1` command. (Otherwise, there is a risk the `G1` "
"command will make an undesirable request.)"
msgstr ""
"不幸的是，G-Code 命令语言在使用上有些难度。移动工具头的标准机制是通过 `G1` 命令（`G0` 命令是 `G1` "
"的别名，它们互换使用）。然而，这个命令依赖于由`M82`、`M83`、`G90`、`G91`、`G92`, "
"以及先前的`G1`命令所设置的\"G-Code解析状态\"。在创建 G-Code 宏时，最好在发出`G1`命令之前，先明确 G-Code "
"解析状态。(否则，`G1` 命令就有可能提出一个不符合预期的请求。）"

msgid ""
"A common way to accomplish that is to wrap the `G1` moves in "
"`SAVE_GCODE_STATE`, `G91`, and `RESTORE_GCODE_STATE`. For example:"
msgstr ""
"实现这一目标的常见方法是将 `G1` 移动包装在 `SAVE_GCODE_STATE`、`G91`和`RESTORE_GCODE_STATE`中。例如："

msgid ""
"The `G91` command places the G-Code parsing state into \"relative move "
"mode\" and the `RESTORE_GCODE_STATE` command restores the state to what it "
"was prior to entering the macro. Be sure to specify an explicit speed (via "
"the `F` parameter) on the first `G1` command."
msgstr ""
"`G91` 命令将G代码解析状态放入 \"相对移动模式\"，`RESTORE_GCODE_STATE` "
"命令将状态恢复到进入宏之前的状态。请确保在第一条`G1` 命令中指定一个明确的速度（通过`F` 参数）。"

msgid "Template expansion"
msgstr "模板扩展"

msgid ""
"The gcode_macro `gcode:` config section is evaluated using the Jinja2 "
"template language. One can evaluate expressions at run-time by wrapping them"
" in `{ }` characters or use conditional statements wrapped in `{% %}`. See "
"the [Jinja2 documentation](http://jinja.pocoo.org/docs/2.10/templates/) for "
"further information on the syntax."
msgstr ""
"gcode_macro`gcode:` 配置部分是使用的是Jinja2模板语言。人们可以通过用`{ }` 字符包装来在运行时使用表达式，或者使用用`{%"
" %}` "
"包装的条件语句。参考[Jinja2文档](http://jinja.pocoo.org/docs/2.10/templates/)以了解更多关于语法的信息。"

msgid "An example of a complex macro:"
msgstr "一个更复杂的宏示例："

msgid "Macro parameters"
msgstr "宏观参数"

msgid ""
"It is often useful to inspect parameters passed to the macro when it is "
"called. These parameters are available via the `params` pseudo-variable. For"
" example, if the macro:"
msgstr ""
"当macro被调用时，检查传递给它的参数往往是有用的。这些参数可以通过`params` 伪变量（pseudo-"
"variable）获得。类似于以下macro："

msgid ""
"were invoked as `SET_PERCENT VALUE=.2` it would evaluate to `M117 Now at "
"20%`. Note that parameter names are always in upper-case when evaluated in "
"the macro and are always passed as strings. If performing math then they "
"must be explicitly converted to integers or floats."
msgstr ""
"如果以`SET_PERCENT VALUE=.2` 的方式调用，则会评估为`M117 现在为 20%` "
"。需要注意的是在宏（macro）中进行评估时，参数名称始终使用大写字母，并且始终以字符串（strings）形式传递。如果执行数学运算，则必须明确地将其转换为整数（integers）或浮点数（floats）。"

msgid ""
"It's common to use the Jinja2 `set` directive to use a default parameter and"
" assign the result to a local name. For example:"
msgstr "通常使用Jinja2的`set` 指令来使用一个默认参数，并将结果分配给一个本地名称。比如说："

msgid "The \"printer\" Variable"
msgstr "\"printer\"变量"

msgid ""
"It is possible to inspect (and alter) the current state of the printer via "
"the `printer` pseudo-variable. For example:"
msgstr "可以通过`printer` 的pseudo-variable来检查（和变更）打印机的当前状态。比如说："

msgid ""
"Available fields are defined in the [Status Reference](Status_Reference.md) "
"document."
msgstr "[Status Reference](Status_Reference.md) 文档中定义了可用字段。"

msgid ""
"Important! Macros are first evaluated in entirety and only then are the "
"resulting commands executed. If a macro issues a command that alters the "
"state of the printer, the results of that state change will not be visible "
"during the evaluation of the macro. This can also result in subtle behavior "
"when a macro generates commands that call other macros, as the called macro "
"is evaluated when it is invoked (which is after the entire evaluation of the"
" calling macro)."
msgstr ""
"注意！宏会先被进行整体计算，然后所产生的命令才会被执行。如果一个宏发出的命令改变了打印机的状态，那么在评估宏的过程中，该状态改变的结果将在执行时不可见。当一个宏产生调用其他宏的命令时，这也可能导致微妙的行为，因为被调用的宏在被调用时才被评估（这是在调用宏的整体计算过程之后）。"

msgid ""
"By convention, the name immediately following `printer` is the name of a "
"config section. So, for example, `printer.fan` refers to the fan object "
"created by the `[fan]` config section. There are some exceptions to this "
"rule - notably the `gcode_move` and `toolhead` objects. If the config "
"section contains spaces in it, then one can access it via the `[ ]` accessor"
" - for example: `printer[\"generic_heater my_chamber_heater\"].temperature`."
msgstr ""
"按照惯例，紧跟在`printer` 后面的名称是一个配置分段的名称。因此，例如，`printer.fan` 指的是由`[fan]` "
"配置分段创建的风扇对象。这条规则有一些例外 - 特别是`gcode_move` 和`toolhead` 对象。如果配置分段包含空格，那么可以通过`[ "
"]` 访问器访问它--例如：`printer[\"generic_heater my_chamber_heater\"].temperature` 。"

msgid ""
"Note that the Jinja2 `set` directive can assign a local name to an object in"
" the `printer` hierarchy. This can make macros more readable and reduce "
"typing. For example:"
msgstr ""
"请注意，Jinja2的`set` 指令可以为`printer` 层次结构中的一个对象指定一个本地名称。这可以改善宏的可读性并减少键入量。例如："

msgid "Actions"
msgstr "行动"

msgid ""
"There are some commands available that can alter the state of the printer. "
"For example, `{ action_emergency_stop() }` would cause the printer to go "
"into a shutdown state. Note that these actions are taken at the time that "
"the macro is evaluated, which may be a significant amount of time before the"
" generated g-code commands are executed."
msgstr ""
"有一些可用的命令可以改变打印机的状态。例如，`{ action_emergency_stop() }` "
"将导致打印机进入关闭状态。请注意，这些动作会在宏被评估的时候执行，这可能是在生成的G代码命令被执行之前的一段相当长的时间。"

msgid "Available \"action\" commands:"
msgstr "可用的“动作”命令："

msgid ""
"`action_respond_info(msg)`: Write the given `msg` to the /tmp/printer "
"pseudo-terminal. Each line of `msg` will be sent with a \"// \" prefix."
msgstr ""
"`action_respond_info(msg)`：将给定的 `msg` 写入 /tmp/printer 伪终端。 `msg` "
"的每一行都会以“//”前缀发送。"

msgid ""
"`action_raise_error(msg)`: Abort the current macro (and any calling macros) "
"and write the given `msg` to the /tmp/printer pseudo-terminal. The first "
"line of `msg` will be sent with a \"!! \" prefix and subsequent lines will "
"have a \"// \" prefix."
msgstr ""
"`action_raise_error(消息)`：终止当前宏（以及任何调用的宏），并将给定的`消息` 写到 /tmp/printer 伪终端。`msg`"
" 的第一行将以\"！！\"为前缀发送，随后几行将以\"//\"为前缀。"

msgid ""
"`action_emergency_stop(msg)`: Transition the printer to a shutdown state. "
"The `msg` parameter is optional, it may be useful to describe the reason for"
" the shutdown."
msgstr "`action_emergency_stop(消息)`：将打印机过渡到关机状态。`消息` 参数是可选的，可以用来描述关机的原因。"

msgid ""
"`action_call_remote_method(method_name)`: Calls a method registered by a "
"remote client. If the method takes parameters they should be provided via "
"keyword arguments, ie: `action_call_remote_method(\"print_stuff\", "
"my_arg=\"hello_world\")`"
msgstr ""
"`action_call_remote_method(方法名)`：调用一个由远程客户端注册的方法。如果该方法需要参数，应通过关键字参数提供，即：`action_call_remote_method(\"print_stuff\","
" 参数=\"hello_world\")`"

msgid "Variables"
msgstr "变量"

msgid ""
"The SET_GCODE_VARIABLE command may be useful for saving state between macro "
"calls. Variable names may not contain any upper case characters. For "
"example:"
msgstr "SET_GCODE_VARIABLE 命令可以在宏调用之间保存状态。变量名不能包含任何大写字符。例如："

msgid ""
"Be sure to take the timing of macro evaluation and command execution into "
"account when using SET_GCODE_VARIABLE."
msgstr "在使用SET_GCODE_VARIABLE时，一定要考虑到宏评估和命令执行的时间顺序。"

msgid "Delayed Gcodes"
msgstr "延迟G代码"

msgid ""
"The [delayed_gcode] configuration option can be used to execute a delayed "
"gcode sequence:"
msgstr "[delayed_gcode]配置分段可以用来执行一个延迟的G代码序列："

msgid ""
"When the `load_filament` macro above executes, it will display a \"Load "
"Complete!\" message after the extrusion is finished. The last line of gcode "
"enables the \"clear_display\" delayed_gcode, set to execute in 10 seconds."
msgstr ""
"当上面的`load_filament` 宏执行时，它将在挤出结束后显示一个 \"Load Complete!\"的信息。最后一行G代码启用 "
"\"clear_display \"delayed_gcode，设置为10秒后执行。"

msgid ""
"The `initial_duration` config option can be set to execute the delayed_gcode"
" on printer startup. The countdown begins when the printer enters the "
"\"ready\" state. For example, the below delayed_gcode will execute 5 seconds"
" after the printer is ready, initializing the display with a \"Welcome!\" "
"message:"
msgstr ""
"`initial_duration` 配置选项可以被设置为在打印机启动时执行 "
"delayed_gcode。倒计时从打印机进入\"ready\"（准备）状态时开始。例如，下面的 delayed_gcode "
"将在打印机准备好后5秒执行，以 \"Welcome！\"的信息初始化显示屏："

msgid ""
"Its possible for a delayed gcode to repeat by updating itself in the gcode "
"option:"
msgstr "延迟G代码可以通过在G代码选项中更新自己来重复自生："

msgid ""
"The above delayed_gcode will send \"// Extruder Temp: [ex0_temp]\" to "
"Octoprint every 2 seconds. This can be canceled with the following gcode:"
msgstr ""
"上述delayed_gcode将每2秒向Octoprint发送 \"// Extruder Temp: "
"[ex0_temp]\"。这可以用下面的gcode取消："

msgid "Menu templates"
msgstr "菜单模板"

msgid ""
"If a [display config section](Config_Reference.md#display) is enabled, then "
"it is possible to customize the menu with [menu](Config_Reference.md#menu) "
"config sections."
msgstr ""
"如果启用了[display配置分段](Config_Reference.md#display)，那么就可以用[menu](Config_Reference.md#menu)配置分段自定义菜单。"

msgid "The following read-only attributes are available in menu templates:"
msgstr "以下只读属性在菜单模板中可用："

msgid "`menu.width` - element width (number of display columns)"
msgstr "`menu.width` - 元素宽度（显示列数）"

msgid "`menu.ns` - element namespace"
msgstr "`menu.ns` - 元素命名空间"

msgid "`menu.event` - name of the event that triggered the script"
msgstr "`menu.event` - 触发脚本的事件名称"

msgid "`menu.input` - input value, only available in input script context"
msgstr "`menu.input` - 输入值，仅在输入脚本上下文中可用"

msgid "The following actions are available in menu templates:"
msgstr "以下操作在菜单模板中可用："

msgid ""
"`menu.back(force, update)`: will execute menu back command, optional boolean"
" parameters `<force>` and `<update>`."
msgstr ""
"`menu.back(force, update)`：将执行菜单返回命令，可选的布尔参数有`<force>`（强制）和`<update>`（更新）。"

msgid ""
"When `<force>` is set True then it will also stop editing. Default value is "
"False."
msgstr "当 `<force>` 设置为 True 时，它也将停止编辑。默认值为 False。"

msgid ""
"When `<update>` is set False then parent container items are not updated. "
"Default value is True."
msgstr "当`<update>` 被设置为False，那么父级容器项目就不会被更新。默认值是True。"

msgid ""
"`menu.exit(force)` - will execute menu exit command, optional boolean "
"parameter `<force>` default value False."
msgstr "`menu.exit(force)` - 将执行菜单退出命令，可选的布尔参数有`<force>`（强制）默认值 False。"

msgid "Save Variables to disk"
msgstr "保存变量到磁盘"

msgid ""
"If a [save_variables config section](Config_Reference.md#save_variables) has"
" been enabled, `SAVE_VARIABLE VARIABLE=<name> VALUE=<value>` can be used to "
"save the variable to disk so that it can be used across restarts. All stored"
" variables are loaded into the `printer.save_variables.variables` dict at "
"startup and can be used in gcode macros. to avoid overly long lines you can "
"add the following at the top of the macro:"
msgstr ""
"如果启用了[save_variables配置分段](Config_Reference.md#save_variables)，`SAVE_VARIABLE"
" VARIABLE=<名称> "
"VALUE=<值>`可以用来将变量保存到磁盘，以便在重新启动时使用。所有存储的变量在启动时会被加载到`printer.save_variables.variables`"
" dict 变量中，可以在G代码宏中使用。为避免行数过长，可以在宏的顶部添加以下内容："

msgid ""
"As an example, it could be used to save the state of 2-in-1-out hotend and "
"when starting a print ensure that the active extruder is used, instead of "
"T0:"
msgstr "例如，它可以用来保存2进1出热端的状态，当开始打印时，确保使用活跃的挤出机，而不是T0："

msgid ""
"[gcode_macro blink_led]\n"
"gcode:\n"
"  SET_PIN PIN=my_led VALUE=1\n"
"  G4 P2000\n"
"  SET_PIN PIN=my_led VALUE=0\n"
msgstr ""
"[gcode_macro blink_led]\n"
"gcode:\n"
"  SET_PIN PIN=my_led VALUE=1 #亮灯\n"
"  G4 P2000 # 等待2000毫秒\n"
"  SET_PIN PIN=my_led VALUE=0 #关灯\n"

msgid ""
"[gcode_macro blink_led]\n"
"description: Blink my_led one time\n"
"gcode:\n"
"  SET_PIN PIN=my_led VALUE=1\n"
"  G4 P2000\n"
"  SET_PIN PIN=my_led VALUE=0\n"
msgstr ""
"[gcode_macro blink_led] #闪灯\n"
"description: Blink my_led one time # 简介：闪一下my_led\n"
"gcode:\n"
"  SET_PIN PIN=my_led VALUE=1 #亮灯\n"
"  G4 P2000 # 等待2000毫秒\n"
"  SET_PIN PIN=my_led VALUE=0 #关灯\n"

msgid ""
"[gcode_macro MOVE_UP]\n"
"gcode:\n"
"  SAVE_GCODE_STATE NAME=my_move_up_state\n"
"  G91\n"
"  G1 Z10 F300\n"
"  RESTORE_GCODE_STATE NAME=my_move_up_state\n"
msgstr ""
"[gcode_macro MOVE_UP] # 向上移动\n"
"gcode:\n"
"  SAVE_GCODE_STATE NAME=my_move_up_state # 保存名称为my_move_up_state的G代码状态\n"
"  G91 # 相对模式\n"
"  G1 Z10 F300 # 慢慢往上移动 10mm，5mm/s\n"
"  RESTORE_GCODE_STATE NAME=my_move_up_state # 恢复名称为my_move_up_state的G代码状态\n"

msgid ""
"[gcode_macro SET_PERCENT]\n"
"gcode:\n"
"  M117 Now at { params.VALUE|float * 100 }%\n"
msgstr ""
"[gcode_macro SET_PERCENT] # 设置百分比\n"
"gcode:\n"
"  M117 Now at { params.VALUE|float * 100 }% # 现在在VALUE* 100的百分比\n"

msgid ""
"[gcode_macro SET_BED_TEMPERATURE]\n"
"gcode:\n"
"  {% set bed_temp = params.TEMPERATURE|default(40)|float %}\n"
"  M140 S{bed_temp}\n"
msgstr ""
"[gcode_macro SET_BED_TEMPERATURE] # 设置热床温度\n"
"gcode:\n"
"  {% set bed_temp = params.TEMPERATURE|default(40)|float %} # 热床温度=params.TEMPERATURE或者默认40\n"
"  M140 S{bed_temp} # 设置热床温度为bed_temp\n"

msgid ""
"[gcode_macro slow_fan]\n"
"gcode:\n"
"  M106 S{ printer.fan.speed * 0.9 * 255}\n"
msgstr ""
"[gcode_macro slow_fan] # 降低风速\n"
"gcode:\n"
"  M106 S{ printer.fan.speed * 0.9 * 255}\n"

msgid ""
"[gcode_macro QUERY_HTU21D]\n"
"gcode:\n"
"    {% set sensor = printer[\"htu21d my_sensor\"] %}\n"
"    M117 Temp:{sensor.temperature} Humidity:{sensor.humidity}\n"
msgstr ""
"[gcode_macro QUERY_HTU21D] # 查询HTU21D\n"
"gcode:\n"
"    {% set sensor = printer[\"htu21d my_sensor\"] %}\n"
"    M117 Temp:{sensor.temperature} Humidity:{sensor.humidity}\n"

msgid ""
"[gcode_macro start_probe]\n"
"variable_bed_temp: 0\n"
"gcode:\n"
"  # Save target temperature to bed_temp variable\n"
"  SET_GCODE_VARIABLE MACRO=start_probe VARIABLE=bed_temp VALUE={printer.heater_bed.target}\n"
"  # Disable bed heater\n"
"  M140\n"
"  # Perform probe\n"
"  PROBE\n"
"  # Call finish_probe macro at completion of probe\n"
"  finish_probe\n"
"\n"
"[gcode_macro finish_probe]\n"
"gcode:\n"
"  # Restore temperature\n"
"  M140 S{printer[\"gcode_macro start_probe\"].bed_temp}\n"
msgstr ""
"[gcode_macro start_probe]\n"
"variable_bed_temp: 0\n"
"gcode:\n"
"  # 保存参数到bed_temp变量\n"
"  SET_GCODE_VARIABLE MACRO=start_probe VARIABLE=bed_temp VALUE={printer.heater_bed.target}\n"
"  # 禁用热床\n"
"  M140\n"
"  # 进行探测\n"
"  PROBE\n"
"  # 在结束时调用finish_probe脚本\n"
"  finish_probe\n"
"\n"
"[gcode_macro finish_probe]\n"
"gcode:\n"
"  # 恢复热床温度\n"
"  M140 S{printer[\"gcode_macro start_probe\"].bed_temp}\n"

msgid ""
"[delayed_gcode clear_display]\n"
"gcode:\n"
"  M117\n"
"\n"
"[gcode_macro load_filament]\n"
"gcode:\n"
" G91\n"
" G1 E50\n"
" G90\n"
" M400\n"
" M117 Load Complete!\n"
" UPDATE_DELAYED_GCODE ID=clear_display DURATION=10\n"
msgstr ""

msgid ""
"[delayed_gcode welcome]\n"
"initial_duration: 5.\n"
"gcode:\n"
"  M117 Welcome!\n"
msgstr ""

msgid ""
"[delayed_gcode report_temp]\n"
"initial_duration: 2.\n"
"gcode:\n"
"  {action_respond_info(\"Extruder Temp: %.1f\" % (printer.extruder0.temperature))}\n"
"  UPDATE_DELAYED_GCODE ID=report_temp DURATION=2\n"
msgstr ""

msgid "UPDATE_DELAYED_GCODE ID=report_temp DURATION=0\n"
msgstr ""

msgid "{% set svv = printer.save_variables.variables %}\n"
msgstr ""

msgid ""
"[gcode_macro T1]\n"
"gcode:\n"
"  ACTIVATE_EXTRUDER extruder=extruder1\n"
"  SAVE_VARIABLE VARIABLE=currentextruder VALUE='\"extruder1\"'\n"
"\n"
"[gcode_macro T0]\n"
"gcode:\n"
"  ACTIVATE_EXTRUDER extruder=extruder\n"
"  SAVE_VARIABLE VARIABLE=currentextruder VALUE='\"extruder\"'\n"
"\n"
"[gcode_macro START_GCODE]\n"
"gcode:\n"
"  {% set svv = printer.save_variables.variables %}\n"
"  ACTIVATE_EXTRUDER extruder={svv.currentextruder}\n"
msgstr ""

#: docs/Command_Templates.md:block 1 (header)
msgid "Commands templates"
msgstr "命令模板"

#: docs/Command_Templates.md:block 28 (header)
msgid "The \"rawparams\" variable"
msgstr ""

#: docs/Command_Templates.md:block 29 (paragraph)
msgid ""
"The full unparsed parameters for the running macro can be access via the "
"`rawparams` pseudo-variable."
msgstr ""

#: docs/Command_Templates.md:block 21 (code)
msgid ""
"[gcode_macro clean_nozzle]\n"
"gcode:\n"
"  {% set wipe_count = 8 %}\n"
"  SAVE_GCODE_STATE NAME=clean_nozzle_state\n"
"  G90\n"
"  G0 Z15 F300\n"
"  {% for wipe in range(wipe_count) %}\n"
"    {% for coordinate in [(275, 4),(235, 4)] %}\n"
"      G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000\n"
"    {% endfor %}\n"
"  {% endfor %}\n"
"  RESTORE_GCODE_STATE NAME=clean_nozzle_state\n"
msgstr ""

#: docs/Command_Templates.md:block 12 (paragraph)
msgid ""
"The terminal will display the description when you use the `HELP` command or"
" the autocomplete function."
msgstr ""

#: docs/Command_Templates.md:block 30 (paragraph)
msgid ""
"Note that this will include any comments that were part of the original "
"command."
msgstr ""

#: docs/Command_Templates.md:block 31 (paragraph)
msgid ""
"See the [sample-macros.cfg](../config/sample-macros.cfg) file for an example"
" showing how to override the `M117` command using `rawparams`."
msgstr ""

#~ msgid ""
#~ "This is quite useful if you want to change the behavior of certain commands "
#~ "like the `M117`. For example:"
#~ msgstr ""

#~ msgid ""
#~ "[gcode_macro M117]\n"
#~ "rename_existing: M117.1\n"
#~ "gcode:\n"
#~ "  {% if rawparams %}\n"
#~ "    {% set escaped_msg = rawparams|replace('\"', '\\\\\"') %}\n"
#~ "    SET_DISPLAY_TEXT MSG=\"{escaped_msg}\"\n"
#~ "    RESPOND TYPE=command MSG=\"{escaped_msg}\"\n"
#~ "  {% else %}\n"
#~ "    SET_DISPLAY_TEXT\n"
#~ "  {% endif %}\n"
#~ msgstr ""

#~ msgid ""
#~ "[gcode_macro M117]\n"
#~ "rename_existing: M117.1\n"
#~ "gcode:\n"
#~ "  M117.1 { rawparams }\n"
#~ "  M118 { rawparams }\n"
#~ msgstr ""

#~ msgid ""
#~ "This will be showing is you use the `HELP` command or use the autocomplete "
#~ "function."
#~ msgstr "会显示和使用`HELP`命令或使用自动完成功能时一样的文本。"

#~ msgid ""
#~ "[gcode_macro clean_nozzle]\n"
#~ "gcode:\n"
#~ "  {% set wipe_count = 8 %}\n"
#~ "  SAVE_GCODE_STATE NAME=clean_nozzle_state\n"
#~ "  G90\n"
#~ "  G0 Z15 F300\n"
#~ "  {% for wipe in range(wipe_count) %}\n"
#~ "    {% for coordinate in [(275,4),(235,4)] %}\n"
#~ "      G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000\n"
#~ "    {% endfor %}\n"
#~ "  {% endfor %}\n"
#~ "  RESTORE_GCODE_STATE NAME=clean_nozzle_state\n"
#~ msgstr ""
