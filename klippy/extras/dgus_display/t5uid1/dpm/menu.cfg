# This file defines the default menus for the touchscreen.

[dgus_home]
param_e1: "extruder"
param_e2: "extruder1"
param_bed: "heater_bed"

[dgus_menu main]
type: list
title: Main

# Tune

[dgus_menu main tune]
type: list
enable: { printer.dgus_status.print_from is not none }
title: Tune

[dgus_menu main tune speed]
type: number_input
variation: step
enable: { printer.dgus_status.print_from is not none }
title: Speed
field_title: Factor
field_unit: %
step: 1
min: 1
max: 500
default: { (printer.gcode_move.speed_factor * 100) }
input_action: M220 S{ get_field_value() }

[dgus_menu main tune flow]
type: number_input
variation: step
enable: { printer.dgus_status.print_from is not none }
title: Flow
field_title: Factor
field_unit: %
step: 1
min: 1
max: 200
default: { (printer.gcode_move.extrude_factor * 100) }
input_action: M221 S{ get_field_value() }

[dgus_menu main tune offset]
type: number_input
variation: steps
enable: { printer.dgus_status.print_from is not none }
title: Offset
field_title: Z
field_unit: mm
decimals: 3
steps: 0.10, 0.01
default_step: 2
min: -5
max: 5
default: { printer.gcode_move.homing_origin.z }
input_action: SET_GCODE_OFFSET Z={ "%.3f" % get_field_value() } MOVE=1

# OctoPrint

[dgus_menu main octoprint]
type: list
enable: { printer.dgus_status.print_from == "serial" }
title: OctoPrint

[dgus_menu main octoprint resume]
type: text
enable: { printer.dgus_status.print_from == "serial" and printer.dgus_status.state == "paused" }
title: Resume
text: Resume printing?
button: Yes!
button_action:
  {% do action_respond_info("action:resume") %}
  {% do set_menu("home", silent=True) %}

[dgus_menu main octoprint pause]
type: text
enable: { printer.dgus_status.print_from == "serial" and printer.dgus_status.state == "printing" }
title: Pause
text: Pause printing?
button: Yes!
button_action:
  {% do action_respond_info("action:pause") %}
  {% do set_menu("home", silent=True) %}

[dgus_menu main octoprint abort]
type: text
enable: { printer.dgus_status.print_from == "serial" }
title: Abort
text: Abort printing?
button: Yes!
button_action:
  {% do action_respond_info("action:cancel") %}
  {% do set_menu("home", silent=True) %}

# SD Card

[dgus_menu main sdcard]
type: vsdlist
enable: { printer.dgus_status.print_from != "serial" }
title: SD Card

[dgus_menu main sdcard start]
type: text
enable: { printer.dgus_status.print_from is none and printer.virtual_sdcard.file_path is not none }
title: Start
text: Start printing { sd_filename(printer.virtual_sdcard.file_path) }?
button: Yes!
button_action:
  M24
  {% do set_menu("home", silent=True) %}

[dgus_menu main sdcard resume]
type: text
enable: { printer.dgus_status.print_from == "sd" and printer.dgus_status.state == "paused" }
title: Resume
text: Resume printing?
button: Yes!
button_action:
  {% if "pause_resume" in printer %}
    RESUME
  {% else %}
    M24
  {% endif %}
  {% do set_menu("home", silent=True) %}

[dgus_menu main sdcard pause]
type: text
enable: { printer.dgus_status.print_from == "sd" and printer.dgus_status.state == "printing" }
title: Pause
text: Pause printing?
button: Yes!
button_action:
  {% if "pause_resume" in printer %}
    PAUSE
  {% else %}
    M25
  {% endif %}
  {% do set_menu("home", silent=True) %}

[dgus_menu main sdcard abort]
type: text
enable: { printer.dgus_status.print_from == "sd" }
title: Abort
text: Abort printing?
button: Yes!
button_action:
  {% if 'pause_resume' in printer %}
    CANCEL_PRINT
  {% else %}
    M25
    M27
    M26 S0
    TURN_OFF_HEATERS
    {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
      G91
      G0 Z5 F1000
      G90
    {% endif %}
  {% endif %}
  {% do set_menu("home", silent=True) %}

# Control

[dgus_menu main control]
type: list
title: Control

[dgus_menu main control home_all]
type: command
enable: { printer.dgus_status.print_from is none }
title: Home All
action: G28

[dgus_menu main control home_xy]
type: command
enable: { printer.dgus_status.print_from is none }
title: Home X/Y
action: G28 X Y

[dgus_menu main control home_z]
type: command
enable: { printer.dgus_status.print_from is none }
title: Home Z
action: G28 Z

[dgus_menu main control disable]
type: command
enable: { printer.dgus_status.print_from is none }
title: Steppers off
action:
  M84
  M18

[dgus_menu main control fan]
type: number_input
variation: slider
condition: { "fan" in printer }
title: Fan
field_title: Speed
field_unit: %
min: 0
max: 100
default: { (printer.fan.speed * 100) }
input_action: M106 S{ map_range(get_field_value(), 0, 100, 0, 255) }

[dgus_menu main control lights_on]
type: command
condition: { "output_pin caselight" in printer }
enable: { not parse_boolean(printer.configfile.config["output_pin caselight"].pwm) and printer["output_pin caselight"].value != 1 }
title: Lights ON
action:
  SET_PIN PIN=caselight VALUE=1
  DGUS_REQUEST_UPDATE

[dgus_menu main control lights_off]
type: command
condition: { "output_pin caselight" in printer }
enable: { not parse_boolean(printer.configfile.config["output_pin caselight"].pwm) and printer["output_pin caselight"].value != 0 }
title: Lights OFF
action:
  SET_PIN PIN=caselight VALUE=0
  DGUS_REQUEST_UPDATE

[dgus_menu main control lights]
type: number_input
variation: slider
condition: { "output_pin caselight" in printer }
enable: { parse_boolean(printer.configfile.config["output_pin caselight"].pwm) }
title: Lights
field_title: Power
field_unit: %
min: 0
max: 100
default: { (printer["output_pin caselight"].value * 100) }
input_action: SET_PIN PIN=caselight VALUE={ get_field_value() / 100 }

[dgus_menu main control move]
type: list
enable: { printer.dgus_status.print_from is none and printer.toolhead.homed_axes != "" }
title: Move

[dgus_menu main control move axis_x]
type: number_input
variation: steps
enable: { printer.dgus_status.print_from is none and "x" in printer.toolhead.homed_axes }
title: Move X
field_title: X
field_unit: mm
decimals: 1
steps: 10.0, 1.00, 0.10
min: { printer.toolhead.axis_minimum.x }
max: { printer.toolhead.axis_maximum.x }
default: { printer.gcode_move.gcode_position.x }
input_action:
  SAVE_GCODE_STATE NAME=__move__axis
  G90
  G1 X{ get_field_value() }
  RESTORE_GCODE_STATE NAME=__move__axis

[dgus_menu main control move axis_y]
type: number_input
variation: steps
enable: { printer.dgus_status.print_from is none and "y" in printer.toolhead.homed_axes }
title: Move Y
field_title: Y
field_unit: mm
decimals: 1
steps: 10.0, 1.00, 0.10
min: { printer.toolhead.axis_minimum.y }
max: { printer.toolhead.axis_maximum.y }
default: { printer.gcode_move.gcode_position.y }
input_action:
  SAVE_GCODE_STATE NAME=__move__axis
  G90
  G1 Y{ get_field_value() }
  RESTORE_GCODE_STATE NAME=__move__axis

[dgus_menu main control move axis_z]
type: number_input
variation: steps
enable: { printer.dgus_status.print_from is none and "z" in printer.toolhead.homed_axes }
title: Move Z
field_title: Z
field_unit: mm
decimals: 1
steps: 10.0, 1.00, 0.10
min: 0
max: { printer.toolhead.axis_maximum.z }
default: { printer.gcode_move.gcode_position.z }
input_action:
  SAVE_GCODE_STATE NAME=__move__axis
  G90
  G1 Z{ get_field_value() }
  RESTORE_GCODE_STATE NAME=__move__axis

# Temperature

[dgus_menu main temp]
type: list
condition: { "heaters" in printer }
title: Temperature

[dgus_menu main temp extruder]
type: number_input
condition: { printer.toolhead.extruder in printer.heaters.available_heaters }
title: Extruder
field_title: Temperature
field_unit: C
min: 0
max: { printer.configfile.config[printer.toolhead.extruder].max_temp }
default: { printer[printer.toolhead.extruder].target }
input_action: M104 S{ get_field_value() }

[dgus_menu main temp bed]
type: number_input
condition: { "heater_bed" in printer.heaters.available_heaters }
title: Bed
field_title: Temperature
field_unit: C
min: 0
max: { printer.configfile.config.heater_bed.max_temp }
default: { printer.heater_bed.target }
input_action: M140 S{ get_field_value() }

[dgus_menu main temp preheat_pla]
type: list
enable: { printer.dgus_status.print_from is none }
title: Preheat PLA

[dgus_menu main temp preheat_pla both]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters and "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Both
action:
  M140 S60
  M104 S200
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp preheat_pla hotend]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Hotend
action:
  M104 S200
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp preheat_pla bed]
type: command
condition: { "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Bed
action:
  M140 S60
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp preheat_abs]
type: list
enable: { printer.dgus_status.print_from is none }
title: Preheat ABS

[dgus_menu main temp preheat_abs both]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters and "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Both
action:
  M140 S100
  M104 S240
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp preheat_abs hotend]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Hotend
action:
  M104 S240
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp preheat_abs bed]
type: command
condition: { "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Bed
action:
  M140 S100
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp cool]
type: list
enable: { printer.dgus_status.print_from is none }
title: Cooldown

[dgus_menu main temp cool both]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters and "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Both
action:
  M104 S0
  M140 S0
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp cool hotend]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Hotend
action:
  M104 S0
  {% do set_menu("main:temp", silent=True) %}

[dgus_menu main temp cool bed]
type: command
condition: { "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Bed
action:
  M140 S0
  {% do set_menu("main:temp", silent=True) %}

# Filament

[dgus_menu main filament]
type: list
condition: { printer.toolhead.extruder in printer }
title: Filament

[dgus_menu main filament load_fast]
type: command
title: Fast load
action:
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E50 F960
  RESTORE_GCODE_STATE NAME=__filament__load

[dgus_menu main filament load_slow]
type: command
title: Slow load
action:
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E50 F240
  RESTORE_GCODE_STATE NAME=__filament__load

[dgus_menu main filament unload_fast]
type: command
title: Fast unload
action:
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E-50 F960
  RESTORE_GCODE_STATE NAME=__filament__load

[dgus_menu main filament unload_slow]
type: command
title: Slow unload
action:
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E-50 F240
  RESTORE_GCODE_STATE NAME=__filament__load

[dgus_menu main filament feed]
type: number_input
variation: steps
title: Feed
field_title: Distance
field_unit: mm
decimals: 1
steps: 10.0, 1.00, 0.10
min: -{ printer.configfile.config[printer.toolhead.extruder].max_extrude_only_distance|default(50) }
max: { printer.configfile.config[printer.toolhead.extruder].max_extrude_only_distance|default(50) }
default: 10
button: Feed
button_action:
  SAVE_GCODE_STATE NAME=__filament__load
  M83
  G1 E{ get_field_value() } F240
  RESTORE_GCODE_STATE NAME=__filament__load

# Setup

[dgus_menu main setup]
type: list
enable: { printer.dgus_status.print_from is none }
title: Setup

[dgus_menu main setup save_config]
type: command
enable: { printer.dgus_status.print_from is none }
title: Save config
action: SAVE_CONFIG

[dgus_menu main setup display]
type: list
enable: { printer.dgus_status.print_from is none }
title: Display

[dgus_menu main setup display volume]
type: number_input
variation: slider
enable: { printer.dgus_status.print_from is none }
title: Volume
field_title: Level
field_unit: %
min: 0
max: 100
default: { get_volume() }
input_action: {% do set_volume(get_field_value(), True) %}

[dgus_menu main setup display brightness]
type: number_input
variation: slider
enable: { printer.dgus_status.print_from is none }
title: Brightness
field_title: Level
field_unit: %
min: 0
max: 100
default: { get_brightness() }
input_action: {% do set_brightness(get_field_value(), True) %}

[dgus_menu main setup restart]
type: list
enable: { printer.dgus_status.print_from is none }
title: Restart

[dgus_menu main setup restart host]
type: command
enable: { printer.dgus_status.print_from is none }
title: Restart host
action: RESTART

[dgus_menu main setup restart firmware]
type: command
enable: { printer.dgus_status.print_from is none }
title: Restart firmware
action: FIRMWARE_RESTART

[dgus_menu main setup pid]
type: list
condition: { "heaters" in printer }
enable: { printer.dgus_status.print_from is none }
title: PID tuning

[dgus_menu main setup pid hotend]
type: command
condition: { printer.toolhead.extruder in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Hotend
action:
  PID_CALIBRATE HEATER={ printer.toolhead.extruder } TARGET=200
  {% do set_menu("home", silent=True) %}

[dgus_menu main setup pid bed]
type: command
condition: { "heater_bed" in printer.heaters.available_heaters }
enable: { printer.dgus_status.print_from is none }
title: Bed
action:
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  {% do set_menu("home", silent=True) %}

[dgus_menu main setup calibration]
type: list
enable: { printer.dgus_status.print_from is none }
title: Calibration

[dgus_menu main setup calibration mesh]
type: command
condition: { "bed_mesh" in printer.configfile.config }
enable: { printer.dgus_status.print_from is none }
title: Mesh calibration
action:
  G28
  BED_MESH_CALIBRATE

[dgus_menu main setup calibration delta]
type: command
condition: { "delta_calibrate" in printer.configfile.config }
enable: { printer.dgus_status.print_from is none }
title: Delta calibration
action:
  G28
  DELTA_CALIBRATE

[dgus_menu main setup calibration probe]
type: command
condition: { "probe" in printer.configfile.config }
enable: { printer.dgus_status.print_from is none }
title: Probe
action: PROBE

[dgus_menu main setup dump]
type: command
enable: { printer.dgus_status.print_from is none }
title: Dump parameters
action:
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
    {% else %}
      { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
    {% endfor %}
  {% endfor %}
